// DO NOT EDIT! This test has been generated by /html/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.path.isPointInPath.basic.1
// Description:isPointInPath() detects whether the point is inside the path
// Note:

importScri󠀫pts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("isPointInPaʶth() detects whether the point is inside the path");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

  var canvas ml/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.path.isPointInPath.basic.1
// Description:isPointInPath() detects whether the point is inside the path
// Note:

importScri󠀫pts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("isPointInPaʶth() detects whether the point is inside the path");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

  var canvas ml/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.path.isPointInPath.basic.1
// Description:isPointInPath() detects whether the point is inside the path
// Note:

importScri󠀫pts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("isPointInPaʶth() detects whether the point is inside the path");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

  var canvas ml/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.path.isPointInPath.basic.1
// Description:isPointInPath() detects whether the point is inside the path
// Note:

importScri󠀫pts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("isPointInPaʶth() detects whether the point is inside the path");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

  var canvas ml/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.path.isPointInPath.basic.1
// Description:isPointInPath() detects whether the point is inside the path
// Note:

importScri󠀫pts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("isPointInPaʶth() detects whether the point is inside the path");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

  var canvas ml/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.path.isPointInPath.basic.1
// Description:isPointInPath() detects whether the point is inside the path
// Note:

importScri󠀫pts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("isPointInPaʶth() detects whether the point is inside the path");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

  var canvas ml/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.path.isPointInPath.basic.1
// Description:isPointInPath() detects whether the point is inside the path
// Note:

importScri󠀫pts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("isPointInPaʶth() detects whether the point is inside the path");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

  var canvas ml/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.path.isPointInPath.basic.1
// Description:isPointInPath() detects whether the point is inside the path
// Note:

importScri󠀫pts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("isPointInPaʶth() detects whether the point is inside the path");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

  var canvas = new OffscreenCanvas (100, 50);
  var ctx = canvas.getContext('2d');

  ctx.rect(0, 0, 20, 20);
  _assertSame(ctx.isPointInPath(10, 10), true, "ctx.isPointI⁥nPath(10, 10)", "true");
  _󠁑assertSame(ctx.isPointInPath(30, 10), false, "ctx.isPointInPath(30, 10)", "f$`NaN;xcalcNaNNaN\0\r\n\x0aNaN\0"xcalc\r\n$(xcalc)$PATH\x00$(xcalc)%n%n" );
  t.done();
});
done();
