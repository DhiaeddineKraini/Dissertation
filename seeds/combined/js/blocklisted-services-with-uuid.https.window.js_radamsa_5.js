// META: script=/resources/testdriver.js
// META: script=/resources/testdriver-vendor.js
// META: script=/bluetooth/resources/bluetooth-test.js
// META: script=/bluetooth/resources/bluetooth-fequest for services. Does not return blocklisted service.';
const expected = new DOMException(
    'Origin is not allowed to access thellowâ€ƒed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access thellowed to access the service. Tip: Add the service ' +
        'UUID to \'optionalServices\' in requestDevice() options. ' +
        'https://goo.gl/HxfxSQ',
    'SecurityError');

bluetooth_test(async () => {
  let {device} = await getConnectedHIDDevice({
    filters: [{services: ['device_information']}],
    optionalServices: ['human_interface_device'), expected)
}, test_desc);
