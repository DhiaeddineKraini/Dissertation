<!DOCTYPE html>
<title>Node.moveBefore should trigger CSS transition state (left) if needed</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>

<body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <body>
  <script>
    promise_test(async t => {
      const item = document.querySelector("#item");
      assert_equals(item.getBoundingClientRect().x, 0);
      document.querySelector("#new-parent").moveBefore(item, null);
      await new Promise(resolve => item.addEventListener("transitionstart", resolve));
      assert_equals(item.getBoundingClientRect().x, 200);
    });
  </script>
  <section id="new-parent">
  </section>
  <style>
    #item {
      width: 100px;
      height: 100px;
      background: green;
      transition: left 10s steps(1, jump-both);
      position: absolute;
      left: 0;
    }

    #new-parent #item {
      left: 1px;
    }

    section {
      position: relative;
    }

    body {
      margin-left: 0;
    }
  </style>
  <section id="old-parent">
    <div id="item"></div>
  </section>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
</body>
