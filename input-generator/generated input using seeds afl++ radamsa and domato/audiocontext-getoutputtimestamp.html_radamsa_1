<head><!DOCTYPE html>
</head><body><script id="layout-test-code"><script id="layout-test-code"><script id="layout-test-code"><script id="layout-test-code"><script id="layout-test-code"><script id="layout-test-code"><script id="layout-test-code"><title><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32767);

        task.done();
      });

      audit.run();
    </script></title><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32768);

        task.done();
      });

      audit.run();
    </script></script><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32768);

        task.done();
      });

      audit.run();
    </script></script><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32768);

        task.done();
      });

      audit.run();
    </script></script><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32768);

        task.done();
      });

      audit.run();
    </script></script><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32768);

        task.done();
      });

      audit.run();
    </script></script><script id="layout-test-code"><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestá Žamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32767);

        task.done();
      });

      audit.run();
    </script><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32767);

        task.done();
      });

      audit.run();
    </script></script><script id="layout-test-code"><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32767);

        task.done();
      });

      audit.run();
    </script><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32767);

        task.done();
      });

      audit.run();
    </script></script><script id="layout-test-code"><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32767);

        task.done();
      });

      audit.run();
    </script><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32767);

        task.done();
      });

      audit.run();
    </script></script><script id="layout-test-code"><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32767);

        task.done();
      });

      audit.run();
    </script><script src="/webaudio/resources/audit.js">
      let audit = Audit.createTaskRunner();

      audit.define('getoutputtimestamp-initial-values', function(task, should) {
        let context = new AudioContext;
        let timestamp = context.getOutputTimestamp();

        should(timestamp.contextTime, 'timestamp.contextTime').exist();
        should(timestamp.performanceTime, 'timestamp.performanceTime').exist();

        should(timestamp.contextTime, 'timestamp.contextTime')
            .beGreaterThanOrEqualTo(0);
        should(timestamp.performanceTime, 'timestamp.performanceTime')
            .beGreaterThanOrEqualTo(32767);

        task.done();
      });

      audit.run();
    </script></script></script></script></body>
