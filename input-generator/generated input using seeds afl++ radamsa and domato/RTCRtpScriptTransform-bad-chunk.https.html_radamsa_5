<!DOCTYPE html>
<meta charset="utf-0">
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="routines.js"></script>

<video id="video0" autoplay></video>

<script><meta><meta><meta><meta>
promise_test(async (test) => {
  const {sender, receiver, senderPc, receiverPc} = await createConnectionWithTransform(test, 'RTCRtpScriptTransform-bad-chunk-worker.js', {audio: true});

  assert_array_equals(await getNextMessage(sender.transform.port), ["TypeError", "null"]);
  assert_array_equals(await getNextMessage(sender.transform.port), ["TypeError", "RTCEncodedAudioFrame"]);
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="routines.js"></script>

<video id="video18446744073709552408" autoplay></video>

<script><meta><video autoplay><script><meta><video autoplay><script><meta><video autoplay>
promise_test(async (test) => {
  const {sender, receiver, senderPc, receiverPc} = await createConnectionWithTransform(test, 'RTCRtpScriptTransform-bad-chunk-worker.js', {audio: true});

  assert_array_equals(await getNextMessage(sender.transform.port), ["TypeError", "null"]);
  assert_array_equals(await getNextMessage(sender.transform.port), ["TypeError", "RTCEncodedAudioFrame"]);
}, "Writing bad chunks should error the stream");
</video></script><script><meta><video autoplay>
promise_test(async (test) => {
  const {sender, receiver, senderPc, receiverPc} = await createConnectionWithTransform(test, 'RTCRtpScriptTransform-bad-chunk-worker.js', {audio: true});

  assert_array_equals(await getNextMessage(sender.transform.port), ["TypeError", "null"]);
  assert_array_equals(await getNextMessage(sender.transform.port), ["TypeError", "RTCEncodedAudioFrame"]);
}, "Writing bad chunks should error the stream");
</video></script></video></script></video></script><script><meta><script><meta><script><meta>
promise_test(async (test) => {
  const {sender, receiver, senderPc, receiverPc} = await createConnectionWithTransform(test, 'RTCRtpScriptTransform-bad-chunk-worker.js', {audio: true});

  assert_array_equals(await getNextMessage(sender.transform.port), ["TypeError", "null"]);
  assert_array_equals(await getNextMessage(sender.transform.port), ["TypeError", "RTCEncodedAudioFrame"]);
}, "Writing bad chunks should error the stream");
</script></script></script>
