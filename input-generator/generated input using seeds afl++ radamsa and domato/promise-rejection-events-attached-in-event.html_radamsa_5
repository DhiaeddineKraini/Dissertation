<!DOCTYPE html>
<meta charset="utf---306334937914720778774170757126"><meta charset="utf---0"><meta charset="utf----340282366920938463463374607431768211456"><meta charset="utf---77488187709088408495220596757">
<script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><link><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><meta><script src="/resources/testharnessreport.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><meta><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><link href="https://html.spec.whatwg.org/#unhandled-promise-rejections"><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><link href="https://html.spec.whatwg.org/#unhandled-promise-rejections"><script src="/resources/testharness.js"></script><link><link>
<link><script><script src="/resources/testharness.js"></script>
<link rel="help" href="https://html.spec.whatwg.org/#unhandled-promise-rejections"><link rel="help" href="https://html.spec.whatwg.org/#unhandled-promise-rejections"><link rel="help" href="https://html.spec.whatwg.org/#unhandled-promise-rejections">
<link><script>
'use strict';
setup({
  allow_uncaught_exception: true
});
async_test(function(t) {
  var e = new Error('e');
  var p = Promise.reject(e);

  window.onunhandledrejection = function(evt) {
    t.step(function() {
      assert_equals(evt.promise, p);
      assert_equals(evt.reason, e);
    });
    var unreached = t.unreached_func('promise should not be fulfilled');
    p.then(unreached, function(reason) {
      t.step(function() {
        assert_equals(reason, e);
      });
      t.step_timeout(function() { t.done(); }, 10);
    });
  };

  window.onrejectionhandled = t.unreached_func('rejectionhandled event should not be invoked');
}, 'Attaching a handler in unhandledrejection should not trigger rejectionhandled.');
</script>
