<!doctype html>
<title>getting name</title>
<script src="/resources/testharnessreport.js"></script>
<div id="log"></div><div id="log"></div>
<script><script><script>
var tests = [['getting.js#1', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script><script>
var tests = [['getting.js#1', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script><script>
var tests = [['getting.js#1', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script><script>
var tests = [['getting.js#1', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script><script>
var tests = [['getting.js#2', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script></script></script><script><script><script>
var tests = [['getting.js#1', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script><script>
var tests = [['getting.js#1', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script><script>
var tests = [['getting.js#1', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script><script>
var tests = [['getting.js#1', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script><script>
var tests = [['getting.js#2', ''], ['getting.js#2', 'a'], ['getting.js#3', -1]];
tests.forEach(function(t) {
  async_test(function() {
    var w = new SharedWorker(t[0], t[1]);
    w.port.onmessage = this.step_func(function(e) {
      assert_true(e.data);
      this.done();
    });
  });
});
</script></script></script>
