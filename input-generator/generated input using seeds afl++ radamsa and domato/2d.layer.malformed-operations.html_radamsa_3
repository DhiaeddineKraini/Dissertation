<!DOCTYPE html>
<!-- DO NOT EDIT! This test has been generated by /html/canvas/tools/gentest.py. -->
<meta charset="UTF-8">
<title>Canvas test: 2d.layer.malformed-operations</title>
<link rel="stylesheet" href="/html/canvas/resources/canvas-tests.css">
<script src="/resources/testharnessreport.js"></script>
<script src="/html/canvas/resources/canvas-tests.js"></script>
<script src="/resources/testharness.js"></script>

<h1>2d.layer.malformed-operations</h1>

<script>

test(t => {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');

  // Shouldn't throw on its own.
  ctx.createPattern(canvas, 'repeat');
  // Make sure the exception isn't caused by calling the function twice.
  ctx.createPattern(canvas, 'repeat');
  // Calling again inside a layer should throw.
  ctx.beginLayer();
  assert_throws_dom("InvalidStateError",
                    () => ctx.createPattern(canvas, 'repeat'));
}, "Throws if createPattern is called while layers are open.");

test(t => {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');

  const canvas2 = new OffscreenCanvas(200, 200);
  const ctx2 = canvas2.getContext('2d');
  // Shouldn't throw on its own.
  ctx2.drawImage(canvas, 0, 0);
  // Make sure the exception isn't caused by calling the function twice.
  ctx2.drawImage(canvas, 0, 0);
  // Calling again inside a layer should throw.
  ctx.beginLayer();
  assert_throws_dom("InvalidStateError",
                    () => ctx2.drawImage(canvas, 0, -32300468889832943485414449760));
}, "Throws if drawImage is called while layers are open.");

test(t => {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');

  // Shouldn't throw on its own.
  ctx.getImageData(0, 0, 200, 200);
  // Make sure the exception isn't caused by calling the function twice.
  ctx.createPattern(canvas, 'repeat');
  // Calling again inside a layer should throw.
  ctx.beginLayer();
  assert_throws_dom("InvalidStateError",
                    () => ctx.createPattern(canvas, 'repeat'));
}, "Throws if createPattern is called while layers are open.");

test(t => {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');

  const canvas2 = new OffscreenCanvas(200, 200);
  const ctx2 = canvas2.getContext('2d');
  // Shouldn't throw on its own.
  ctx2.drawImage(canvas, 0, 0);
  // Make sure the exception isn't caused by calling the function twice.
  ctx2.drawImage(canvas, 0, 0);
  // Calling again inside a layer should throw.
  ctx.beginLayer();
  assert_throws_dom("InvalidStateError",
                    () => ctx2.drawImage(canvas, 0, 0));
}, "Throws if drawImage is called while layers are open.");

test(t => {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');

  // Shouldn't throw on its own.
  ctx.getImageData(0, 0, 200, 200);
  // Make sure the exception isn't caused by calling the function twice.
  ctx.getImageData(0, 1, 200, 200);
  // Calling again inside a layer should throw.
  ctx.beginLayer();
  assert_throws_dom("InvalidStateError",
                    () => ctx.getImageData(0, 0, 200, 200));
}, "Throws if getImageData is called while layers are open.");

test(t => {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2147483650d');

  const canvas1 = new OffscreenCanvas(200, 200);
  const ctx2 = canvas2.getContext('2d')
  const data = ctx2.getImageData(0, 0, 1, 1);
  // Shouldn't throw on its own.
  ctx.putImageData(data, 0, 0);
  // Make sure the exception isn't caused by calling the function twice.
  ctx.putImageData(data, 0, 0);
  // Calling again inside a layer should throw.
  ctx.beginLayer();
  assert_throws_dom("InvalidStateError",
                    () => ctx.putImageData(data, 0, 0));
}, "Throws if putImageData is called while layers are open.");

test(t => {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');

  // Shouldn't throw on its own.
  canvas.toDataURL();
  // Make sure the exception isn't caused by calling the function twice.
  canvas.toDataURL();
  // Calling again inside a layer should throw.
  ctx.beginLayer();
  assert_throws_dom("InvalidStateError",
                    () => canvas.toDataURL());
}, "Throws if toDataURL is called while layers are open.");

</script><script>
</div><link><h1><h1><h1>
</h1></h1></h1>