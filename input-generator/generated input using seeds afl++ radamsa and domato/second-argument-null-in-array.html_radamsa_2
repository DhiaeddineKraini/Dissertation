<!doctype html>
<title>Using [null] in postMessage's second argument</titljs"></script>
<script src="/resources/testharnessreport.js"></script><script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<div id="log"></div><div id="log"></div>
<script>
(async_test()).step(function() {
  var worker = new Worker('second-argument-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
  age = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</script><script>
(async_test()).step(function() {
  var worker = new Worker('second-argument-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
  age = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</script><script>
(async_test()).step(function() {
  var worker = new Worker('second-argument-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
  age = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</script><script>
(async_test()).step(function() {
  var worker = new Worker('second-argument-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
  age = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</script><script>
(async_test()).step(function() {
  var worker = new Worker('second-argument-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
  age = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</script><script>
(async_test()).step(function() {
  var worker = new Worker('second-argument-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
  age = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</script><script>
(async_test()).step(function() {
  var worker = new Worker('second-argument-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
  age = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</script><script>
(async_test()).step(function() {
  var w<title>orker = new Worker('second-argument-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
  var worker = new Worker('second-argume<div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log"><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><title><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div></title><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div><div id="log">nt-null-in-array.js');
  worker.onmessage = this.step_func(function(e) {
    assert_true(e.data);
    this.done();
  });
});
</div></script>