<!DOCTYPE HTML>
<html>
<html>
<html>
<html>
<html>
<head>
<title><div>Test#add_cleanup: queuing tests</div></title>
<script src="../../../testharness.js"></script><script src="../../../testharness.js"></script><script src="../../../testharness.js"></script><script src="../../../testharness.js"></script><script src="../../../testharness.js"></script>
<script src="../../../testharnessreport.js"></script>
</head>
<body>
<div id="log"></div>

<script>
"use strict";
var firstCleaned = false;

promise_test(function(t) {
  promise_test(function() {
    assert_true(
      firstCleaned, "should not execute until first test is complete"
    );
      "status_string": "PASS",
      "message": null,

  },
  return Promise.resolve();
    },
    {
    "message": null,
      "properties": {}
  t.add_cleanup(function() {
</script>
    "status_string": "OK"
  "summarized_status": {
}, "Test with a 'cleanup' function");
  }, "test defined when no tests are queued, but one test is executing");
    return Promise.resolve();
{
    {
  "summarized_tests": [
      "message": null,
  });
    firstCleaned = true;


      "name": "Test with a 'cleanup' function",
      "name": "test defined when no tests are queued, but one test is executing",
<script type="text/json" id="expected">
      "status_string": "PASS",
    }
      "properties": {}
  ],
  "type": "complete"
}
</script>
</body>
</html>
<body>
<div id="log"></div>

<script>
"use strict";
var firstCleaned = false;

promise_test(function(t) {
  promise_test(function() {
    assert_true(
      firstCleaned, "should not execute until first test is complete"
    );
      "status_string": "PASS",
      "message": null,

  },
  return Promise.resolve();
    },
    {
    "message": null,
      "properties": {}
  t.add_cleanup(function() {
</script>
    "status_string": "OK"
  "summarized_status": {
}, "Test with a 'cleanup' function");
  }, "test defined when no tests are queued, but one test is executing");
    return Promise.resolve();
{
    {
  "summarized_tests": [
      "message": null,
  });
    firstCleaned = true;


      "name": "Test with a 'cleanup' function",
      "name": "test defined when no tests are queued, but one test is executing",
<script type="text/json" id="expected">
      "status_string": "PASS",
    }
      "properties": {}
  ],
  "type": "complete"
}
</script>
</body>
</html>
<body>
<div id="log"></div>

<script>
"use strict";
var firstCleaned = false;

promise_test(function(t) {
  promise_test(function() {
    assert_true(
      firstCleaned, "should not execute until first test is complete"
    );
      "status_string": "PASS",
      "message": null,

  },
  return Promise.resolve();
    },
    {
    "message": null,
      "properties": {}
  t.add_cleanup(function() {
</script>
    "status_string": "OK"
  "summarized_status": {
}, "Test with a 'cleanup' function");
  }, "test defined when no tests are queued, but one test is executing");
    return Promise.resolve();
{
    {
  "summarized_tests": [
      "message": null,
  });
    firstCleaned = true;


      "name": "Test with a 'cleanup' function",
      "name": "test defined when no tests are queued, but one test is executing",
<script type="text/json" id="expected">
      "status_string": "PASS",
    }
      "properties": {}
  ],
  "type": "complete"
}
</script>
</body>
</html>
<body>
<div id="log"></div>

<script>
"use strict";
var firstCleaned = false;

promise_test(function(t) {
  promise_test(function() {
    assert_true(
      firstCleaned, "should not execute until first test is complete"
    );
      "status_string": "PASS",
      "message": null,

  },
  return Promise.resolve();
    },
    {
    "message": null,
      "properties": {}
  t.add_cleanup(function() {
</script>
    "status_string": "OK"
  "summarized_status": {
}, "Test with a 'cleanup' function");
  }, "test defined when no tests are queued, but one test is executing");
    return Promise.resolve();
{
    {
  "summarized_tests": [
      "message": null,
  });
    firstCleaned = true;


      "name": "Test with a 'cleanup' function",
      "name": "test defined when no tests are queued, but one test is executing",
<script type="text/json" id="expected">
      "status_string": "PASS",
    }
      "properties": {}
  ],
  "type": "complete"
}
</script><title>
</title></body>
</html>
<body>
<div id="log"></div>

<script>
"use strict";
var firstCleaned = false;

promise_test(function(t) {
  promise_test(function() {
    assert_true(
      firstCleaned, "should not execute until first test is complete"
    );
      "status_string": "PASS",
      "message": null,

  },
  return Promise.resolve();
    },
    {
    "message": null,
      "properties": {}
  t.add_cleanup(function() {
</script>
    "status_string": "OK"
  "summarized_status": {
}, "Test with a 'cleanup' function");
  }, "test defined when no tests are queued, but one test is executing");
    return Promise.resolve();
{
    {
  "summarized_tests": [
      "message": null,
  });
    firstCleaned = true;


      "name": "Test with a 'cleanup' function",
      "name": "test defined when no tests are queued, but one test is executing",
<script type="text/json" id="expected"><script type="text/json" id="expected"><script type="text/json" id="expected">
      "status_string": "PASS",
    }
      "properties": {}
  ],
  "type": "complete"
}
</script></script></script>
</body>
</html>
