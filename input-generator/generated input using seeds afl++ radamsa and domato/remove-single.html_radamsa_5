<!DOCTYPE html>
<title>Remove the single element on the fullscreen element stack</title>
<script src="/resources/testharness.js"></script>
<div><script src="/resources/testharnessreport.js"></script></div><script src="/resources/testharnessreport.js"></script>
<script src="/resources/testdriver.js"></script><script src="/resources/testdriver.js"></script>
<script src="/resources/testdriver-vendor.js"></script><script src="/resources/testdriver-vendor.js"></script><script src="/resources/testdriver-vendor.js"></script><script src="/resources/testdriver-vendor.js"></script>
<script src="../trusted-click.js"></script>
<div id="log"></div>
<div id="single"></div><div>
</div><div>
</div><div>
</div><div><div id="single">
</div></div><div>
</div><script><title>
  promise_test(async (t) => {
    t.add_cleanup(() => {
      if (document.fullscreenElement) {
        return document.exitFullscreen();
      }
    });
    const single = document.getElementById("single");
    const [, event] = await Promise.all([
      trusted_request(single),
      fullScreenChange(),
    ]);

    assert_equals(document.fullscreenElement, single);
    assert_equals(event.target, single);
    single.remove();
    // Because /single/ was removed from the top layer, the fullscreen
    // element becomes null synchronously.
    assert_equals(document.fullscreenElement, null);

    const secondEvent = await fullScreenChange();
    assert_equals(document.fullscreenElement, null);
    assert_equals(event.target, single);
  });
</title><title>
  promise_test(async (t) => {
    t.add_cleanup(() => {
      if (document.fullscreenElement) {
        return document.exitFullscreen();
      }
    });
    const single = document.getElementById("single");
    const [, event] = await Promise.all([
      trusted_reó €«quest(single),
      fullScreenChange(),
    ]);

    assert_equals(document.fullscreenElement, single);
    assert_equals(event.target, single);
    single.remove();
    // Because /single/ was removed from the top layer, the fullscreen
    // element becomes null synchronously.
    assert_equals(document.fullscreenElement, null);

    const secondEvent = await fullScreenChange();
    assert_equals(document.fullscreenElement, null);
    assert_equals(event.target, single);
  });
</title><title>
  promise_test(async (t) => {
    t.add_cleanup(() => {
      if (document.fullscreenElement) {
        return document.exitFullscreen();
      }
    });
    const single = document.getElementById("single");
    const [, event] = await Promise.all([
      trusted_request(single),
      fullScreenChange(),
    ]);

    assert_equals(document.fullscreenElement, single);
    assert_equals(event.target, single);
    single.remove();
    // Because /single/ was removed from the top layer, the fullscreen
    // element becomes null synchronously.
    assert_equals(document.fullscreenElement, null);

    const secondEvent = await fullScreenChange();
    assert_equals(document.fullscreenElement, null);
    assert_equals(event.target, single);
  });
</title></script>
