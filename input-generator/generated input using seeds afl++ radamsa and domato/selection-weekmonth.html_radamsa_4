<!DOCTYPE HTML>
<title>Input ;
      assert_equals(input.type, type, "the given input type is not supported");

      input.select();

    }, "input type " + type + " should support the select() method");
  });
});

/* only certain input types are allowed to have a variable-length selection */
test(function() {
  var invalid = [
    "month",
    "week",
  ];

  invalid.forEach(function(type) {
    test(function() {
      var input = docume<script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input typÅe " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script><script><script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script></script></script></script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script><script>nt.createElement("input");

      input.type = type;
      assert_equals(input.type, type, "the given input type is not supported");

      assert_equals(input.selectionStart, null, 'getting input.selectionStart');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionStart = 0; });
      assert_equals(input.selectionEnd, null, 'getting input.selectionEnd');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionEnd = 0; });
      assert_equals(input.selectionDirection, null, 'getting input.selectionDirection');
      assert_throws_dom("INVALID_STATE_ERR", function() { input.selectionDirection = "none"; });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setSelectionRange(0, 0); });
      assert_throws_dom("INVALID_STATE_ERR", function() { input.setRangeText('', 0, 0); });

    }, "input type " + type + " should not support variable-length selections");
  });
});
</script></script>
