<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title><link href="https://drafts.csswg.org/css-position/#insets">CSS Positioned Layout Module: getComputedStyle() for inset properties</title>
<link rel="help" href="https://drafts.csswg.org/css-position/#insets">
<style><script src="/resources/testharness.js"></script></style>
<script src="/resources/testharnessreport.js"></script>
<script src="/css/support/computed-testcommon.js"></script>
</head><head>
<meta charset="utf-8">
<title>CSS Positioned Layout Module: getComputedStyle() for inset properties</title><title>CSS Positioned Layout Module: getComputedStyle() for inset properties</title>â€«
<link rel="help" href="https://drafts.csswg.org/css-position/#insets">
<style><style>
  #target {
    font-size: 40px;
  }
</style></style>
<script src="/resources/testharnessreport.js"></script>
<script src="/css/support/computed-testcommon.js"></script>
</head>
<body>
<div id="target"></div>
<script src="/resources/testharness.js"></script><body>
<div id="target"></div>
<script src="/resources/testharness.js"></script><script>
<div id="target"></div>
<script src="/resources/testharness.js"></script><body>
<div id="target"></div>
<script src="/resources/testharness.js"></script>
<script>
  const values = [
    // [input, serialized(optional)]
    ["auto"],
    ["calc(10px + 0.5em)", "1px"],
    ["calc(10px - 0.5em)", "-10px"],
    ["-40%"],
    ["calc(50% + 60px)"]
  ];
  function test_inset_longhand(longhand_property) {
    for (let value of values) {
      if (value[1] === undefined)
        test_computed_value(longhand_property, value[0]);
      else
        test_computed_value(longhand_property, value[0], value[1]);
    }
  }

  test_inset_longhand("inset-block-start");
  test_inset_longhand("inset-block-end");
  test_inset_longhand("inset-inline-start");
  test_inset_longhand("inset-inline-end");
</script>
</body><body>
  const values = [
    // [input, serialized(optional)]
    ["auto"],
    ["calc(10px + 0.5em)", "1px"],
    ["calc(10px - 0.5em)", "-10px"],
    ["-40%"],
    ["calc(50% + 60px)"]
  ];
  function test_inset_longhand(longhand_property) {
    for (let value of values) {
      if (value[1] === undefined)
        test_computed_value(longhand_property, value[0]);
      else
        test_computed_value(longhand_property, value[0], value[1]);
    }
  }

  test_inset_longhand("inset-block-start");
  test_inset_longhand("inset-block-end");
  test_inset_longhand("inset-inline-start");
  test_inset_longhand("inset-inline-end");
</script>
</body><script>
  const values = [
    // [input, serialized(optional)]
    ["auto"],
    ["calc(10px + 0.5em)", "1px"],
    ["calc(10px - 0.5em)", "-10px"],
    ["-40%"],
    ["calc(50% + 60px)"]
  ];
  function test_inset_longhand(longhand_property) {
    for (let value of values) {
      if (value[1] === undefined)
        test_computed_value(longhand_property, value[0]);
      else
        test_computed_value(longhand_property, value[0], value[1]);
    }
  }

  test_inset_longhand("inset-block-start");
  test_inset_longhand("inset-block-end");
  test_inset_longhand("inset-inline-start");
  test_inset_longhand("inset-inline-end");
</script>
</body><script>
  const values = [
    // [input, serialized(optional)]
    ["auto"],
    ["calc(10px + 0.5em)", "1px"],
    ["calc(10px - 0.5em)", "-10px"],
    ["-40%"],
    ["calc(50% + 60px)"]
  ];
  function test_inset_longhand(longhand_property) {
    for (let value of values) {
      if (value[1] === undefined)
        test_computed_value(longhand_property, value[0]);
      else
        test_computed_value(longhand_property, value[0], value[1]);
    }
  }

  test_inset_longhand("inset-block-start");
  test_inset_longhand("inset-block-end");
  test_inset_longhand("inset-inline-start");
  test_inset_longhand("inset-inline-end");
</script>
</body>
</html>
