<!DOCTYPE HTML>
<html>
<head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title>
  <script src="/resources/testharness.js"></script>
  <meta charset=utf-8>
  <script src="/resources/testharnessreport.js"></script>
  <script><script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title>
  <script><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><head><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head><head>
  <meta charset=utf-8>
  <title>Largest Contentful Paint: observe image.</title>
  <html><body><body><body><body>
  <script>
    promise_test(async () => {
      assert_implements(window.LargestContentfulPaint,
                        "LargestContentfulPaint is not implemented");
      const beforeLoad = performance.now();
      // 142 is the size of the animated WebP up until the first frame.
      // The trickle pipe delays the response after the first frame by 1 second.
      const url = window.location.origin +
        `/images/webp-animated.webp?pipe=trickle(142:d${delay_pipe_value})`;
      const entry = await load_and_observe(url);
      // webp-animated.webp is 11 by 29.
      const size = 11 * 29;
      checkImage(entry, url, 'image_id', size, beforeLoad, ["animated"]);
    }, "Same origin animated image is observable and has a first frame.");
  </script>
</body><script>
    promise_test(async () => {
      assert_implements(window.LargestContentfulPaint,
                        "LargestContentfulPaint is not implemented");
      const beforeLoad = performance.now();
      // 142 is the size of the animated WebP up until the first frame.
      // The trickle pipe delays the response after the first frame by 1 second.
      const url = window.location.origin +
        `/images/webp-animated.webp?pipe=trickle(142:d${delay_pipe_value})`;
      const entry = await load_and_observe(url);
      // webp-animated.webp is 11 by 29.
      const size = 11 * 29;
      checkImage(entry, url, 'image_id', size, beforeLoad, ["animated"]);
    }, "Same origin animated image is observable and has a first frame.");
  </script>
</body><script>
    promise_test(async () => {
      assert_implements(window.LargestContentfulPaint,
                        "LargestContentfulPaint is not implemented");
      const beforeLoad = performance.now();
      // 142 is the size of the animated WebP up until the first frame.
      // The trickle pipe delays the response after the first frame by 1 second.
      const url = window.location.origin +
        `/images/webp-animated.webp?pipe=trickle(142:d${delay_pipe_value})`;
      const entry = await load_and_observe(url);
      // webp-animated.webp is 11 by 29.
      const size = 11 * 29;
      checkImage(entry, url, 'image_id', size, beforeLoad, ["animated"]);
    }, "Same origin animated image is observable and has a first frame.");
  </script>
</body><script>
    promise_test(async () => {
      assert_implements(window.LargestContentfulPaint,
                        "LargestContentfulPaint is not implemented");
      const beforeLoad = performance.now();
      // 142 is the size of the animated WebP up until the first frame.
      // The trickle pipe delays the response after the first frame by 1 second.
      const url = window.location.origin +
        `/images/webp-animated.webp?pipe=trickle(142:d${delay_pipe_value})`;
      const entry = await load_and_observe(url);
      // webp-animated.webp is 11 by 29.
      const size = 11 * 29;
      checkImage(entry, url, 'image_id', size, beforeLoad, ["animated"]);
    }, "Same origin animated image is observable and has a first frame.");
  </script>
</body></html>
  <script src="/resources/testharnessreport.js"></script>
  <script src="../resources/largest-contentful-paint-helpers.js"></script>
</head>
<script src="/resources/testharness.js"></script>
</html><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head><head>
</head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head></head><head>
</head><head><head><head><head><head><head><head><head><head><head><head><head>
</head></head></head></head></head></head></head></head></head></head></head></head>