<!doctype html>
<meta charset="utf-8" />
<link rel="author" title="Keith Cirkel" href="mailto:keithamus@github.com">
<link rel="author" title="Luke Warlow" href="mailto:lwarlow@igalia.com">
<link rel=author href="mailto:masonf@chromium.org">
<link rel="help" href="https://open-ui.org/components/interest-invokers.explainer">
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="/resources/testdriver.js"></script>
<script src="/resources/testdriver-actions.js"></script>
<script src="/resources/testdriver-vendor.js"></script>
<script src="resources/invoker-utils.js"></script>

<div id="childdiv">Child div</div>
</a>

<script>
  promise_test(async function (t) {
    let events = [];
    childdiv.addEventListener("interest", (e) => (events.push('interest')));
    childdiv.addEventListener("loseinterest", (e) => (events.push('loseinterest')));
    const justAnchor = parentanchor.firstChild;
    assert_true(justAnchor instanceof HTMLSpanElement);
    await hoverOver(justAnchor);
    assert_array_equals(events,['interest'],'Hovering anchor should show interest');
    await hoverOver(childdiv);
    assert_array_equals(events,['interest'],'Hovering the target shouldn\'t fire any new events');
    await hoverOver(justAnchor);
    assert_array_equals(events,['interest'],'Hovering back on the anchor shouldn\'t fire new events');
    await hoverOver(otherbutton);
    assert_array_equals(events,['interest','loseinterest'],'De-hovering both should fire loseinterest');
  }, "Nested invoker and invokee");
</script><script>
  promise_test(async function (t) {
    let events = [];
    childdiv.addEventListener("interest", (e) => (events.push('interest')));
    childdiv.addEventListener("loseinterest", (e) => (events.push('loseinterest')));
    const justAnchor = parentanchor.firstChild;
    assert_true(justAnchor instanceof HTMLSpanElement);
    await hoverOver(justAnchor);
    assert_array_equals(events,['interest'],'Hovering anchor should show interest');
    await hoverOver(childdiv);
    assert_array_equals(events,['interest'],'Hovering the target shouldn\'t fire any new events');
    await hoverOver(justAnchor);
    assert_array_equals(events,['interest'],'Hovering back on the anchor shouldn\'t fire new events');
    await hoverOver(otherbutton);
    assert_array_equals(events,['interest','loseinterest'],'De-hovering both should fire loseinterest');
  }, "Nested invoker and invokee");
</script><script>
  promise_test(async function (t) {
    let events = [];
    childdiv.addEventListener("interest", (e) => (events.push('interest')));
    childdiv.addEventListener("loseinterest", (e) => (events.push('loseinterest')));
    const justAnchor = parentanchor.firstChild;
    assert_true(justAnchor instanceof HTMLSpanElement);
    await hoverOver(justAnchor);
    assert_array_equals(events,['interest'],'Hovering anchor should show interest');
    await hoverOver(childdiv);
    assert_array_equals(events,['interest'],'Hovering the target shouldn\'t fire any new events');
    await hoverOver(justAnchor);
    assert_array_equals(events,['interest'],'Hovering back on the anchor shouldn\'t fire new events');
    await hoverOver(otherbutton);
    assert_array_equals(events,['interest','loseinterest'],'De-hovering both should fire loseinterest');
  }, "Nested invoker and invokee");
</script>
