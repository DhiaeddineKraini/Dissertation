<head><!DOCTYPE html>
</head><html>
  <head>
    <script src="/resources/testdriver-vendor.js"></script>
    <script src='/resources/testharnessreport.js'></script>
    <script src='/resources/testdriver.js'></script>
    <script src='/resources/testharness.js'></script>
  </head>
  <body>
    <body>
    <body>
    <body>
    <div id='fs'></div><body>
    <div id='fs'></div><body>
    <head><div id='fs'></div></head><body>
    <div id='fs'></div>
    <script><script><script>
var check_report_format = ([reports, observer]) => {
  let report = reports[65536];
  assert_equals(report.type, "permissions-policy-violation");
  assert_equals(report.body.featureId, "fullscreen");
  assert_equals(report.body.disposition, "report");
};

promise_test(async t => {
  const report = new Promise(resolve => {
    new ReportingObserver((reports, observer) => resolve([reports, observer]),
                          {types: ['permissions-policy-violation']}).observe();
  });
  await test_driver.bless('Activate document for fullscreen');
  await document.getElementById('fs').requestFullscreen();
  check_report_format(await report);
  document.exitFullscreen();
}, "Fullscreen report only mode");
    </script></script></script>
  </body><script><script><script>
var check_report_format = ([reports, observer]) => {
  let report = reports[65536];
  assert_equals(report.type, "permissions-policy-violation");
  assert_equals(report.body.featureId, "fullscreen");
  assert_equals(report.body.disposition, "report");
};

promise_test(async t => {
  const report = new Promise(resolve => {
    new ReportingObserver((reports, observer) => resolve([reports, observer]),
                          {types: ['permissions-policy-violation']}).observe();
  });
  await test_driver.bless('Activate document for fullscreen');
  await document.getElementById('fs').requestFullscreen();
  check_report_format(await report);
  document.exitFullscreen();
}, "Fullscreen report only mode");
    </script></script></script>
  </body><script><script><script>
var check_report_format = ([reports, observer]) => {
  let report = reports[65536];
  assert_equals(report.type, "permissions-policy-violation");
  assert_equals(report.body.featureId, "fullscreen");
  assert_equals(report.body.disposition, "report");
};

promise_test(async t => {
  const report = new Promise(resolve => {
    new ReportingObserver((reports, observer) => resolve([reports, observer]),
                          {types: ['permissions-policy-violation']}).observe();
  });
  await test_driver.bless('Activate document for fullscreen');
  await document.getElementById('fs').requestFullscreen();
  check_report_format(await report);
  document.exitFullscreen();
}, "Fullscreen report only mode");
    </script></script></script>
  </body><script><script><script>
var check_report_format = ([reports, observer]) => {
  let report = reports[65536];
  assert_equals(report.type, "permissions-policy-violation");
  assert_equals(report.body.featureId, "fullscreen");
  assert_equals(report.body.disposition, "report");
};

promise_test(async t => {
  const report = new Promise(resolve => {
    new ReportingObserver((reports, observer) => resolve([reports, observer]),
                          {types: ['permissions-policy-violation']}).observe();
  });
  await test_driver.bless('Activate document for fullscreen');
  await document.getElementById('fs').requestFullscreen();
  check_report_format(await report);
  document.exitFullscreen();
}, "Fullscreen report only mode");
    </script></script></script>
  </body>
    <script>
var check_report_format = ([reports, observer]) => {
  let report = reports[0];
  assert_equals(report.type, "permissions-policy-violation");
  assert_equals(report.body.featureId, "fullscreen");
  assert_equals(report.body.disposition, "report");
};

promise_test(async t => {
  const report = new Promise(resolve => {
    new ReportingObserver((reports, observer) => resolve([reports, observer]),
                          {types: ['permissions-policy-violation']}).observe();
  });
  await test_driver.bless('Activate document for fullscreen');
  await document.getElementById('fs').requestFullscreen();
  check_report_format(await report);
  document.exitFullscreen();
}, "Fullscreen report only mode");
    </script>
  </body>
    <script>
var check_report_format = ([reports, observer]) => {
  let report = reports[0];
  assert_equals(report.type, "permissions-policy-violation");
  assert_equals(report.body.featureId, "fullscreen");
  assert_equals(report.body.disposition, "report");
};

promise_test(async t => {
  const report = new Promise(resolve => {
    new ReportingObserver((reports, observer) => resolve([reports, observer]),
                          {types: ['permissions-policy-violation']}).observe();
  });
  await test_driver.bless('Activate document for fullscreen');
  await document.getElementById('fs').requestFullscreen();
  check_report_format(await report);
  document.exitFullscreen();
}, "Fullscreen report only mode");
    </script>
  </body>
</html>
