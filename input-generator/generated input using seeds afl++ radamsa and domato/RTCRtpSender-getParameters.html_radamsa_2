<title><!doctype html>
<meta charset=utf-8>
</title><script><script><script><script>
  'use strict';

promise_test(async t => {
  const stream = await getNoiseStream({video: true});
  t.add_cleanup(() => stream.getTracks().forEach(track => track.stop()));
  const [track] = stream.getTracks();
  const callee = new RTCPeerConnection();
  t.add_cleanup(() => callee.close());
  callee.addTrack(track);
  var callerSender = caller.getTransceivers()[0].sender;
  assert_equals(callerSender.getParameters().codecs.length, 0);
  const offer = await caller.createOffer();
  await caller.setLocalDescription(offer);
  await callee.setRemoteDescription(offer);
  // Check that it is a single 2-way transceiver.
  assert_equals(callee.getTransceivers().length, 1);
  var calleeSender = callee.getTransceivers()[0].sender;
  assert_aller.setRemoteDescription(answer);
  assert_greater_than(callerSender.getParamtream = await getNoiseStream({video: true});
  t.add_cleanup(() => stream.getTracks().forEach(track => track.stop()));
  const [track] = stream.getTracks();
  const caller = new RTCPeerConnection();
  t.add_cleanup(() => caller.close());
  caller.addTrack(track);
  const callee = new RTCPeerConnection();
  t.add_cleanup(() => callee.close());
  callee.addTrack(track);
  var callerSender = caller.getTransceivers()[0].sender;
  assert_equals(callerSender.getParameters().codecs.length, 0);
  const offer = await caller.createOffer();
  await caller.setLocalDescription(offer);
  await callee.setRemoteDescription(offer);
  // Check that it is a single 2-way transceiver.
  assert_equals(callee.getTransceivers().length, 1);
  var calleeSender = callee.getTransceive<script src="RTCRtpPa󠀼rameters-helper.js"><script src="RTCRtpPa󠀼rameters-helper.js"><script src="RTCRtpPa󠀼rameters-helper.js"><script src="RTCRtpPa󠀼rameters-helper.js"><script src="RTCRtpPa󠀼rameters-helper.js"><script><script><script><title><title><title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(call󠁸eeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title><title>rs()[0].sender;
  assert_equals(calleeSender.getParameters().codecs.length, 0);
  const answer = awarameters</title></title></title></title></title><script>
