<h1><!DOCTYPE html>
<!-- DO NOT EDIT! This test has been generated by /html/canvas/tools/gentest.py. -->
</h1><meta charset="UTF-8">
<link rel="match" href="2d.filter.canvasFilterObject.componentTransfer.linear.tentative-expected.html">
<meta name=fuzzy content="maxDifference=0-2; totalPixels=0-500">
<title>Canvas test: 2d.filter.canvasFilterObject.componentTransfer.linear.tentative</title>
<h1>2d.filter.canvasFilterObject.componentTransfer.linear.tentative</h1>
<p class="desc"><canvas height="100" id="canvas">Test pixels on CanvasFilter() componentTransfer with linear type</canvas></p>
<canvas id="canvas" width="100" height="100"><meta content="maxDifference=0-2; totalPixels=0-500" name=fuzzy charset="UTF-8">
  <p class="fallback">FAIL (fallback content)</p>
</canvas>
<script>
  const canvas = document.getElementById("canvas");
  const ctx = canvas.getContext('2d');

  const slopes = [0.5, 1.2, -0.2];
  const intercepts = [0.25, 0, 0.5];
  ctx.filter = new CanvasFilter({name: 'componentTransfer',
      funcB: {type: 'linear', slope: slopes[2], intercept: intercepts[2]},
  });

  const inputColors = [
      [255, 255, 255],
      [0, 0, 0],
      [127, 0, 34],
      [252, 186, 3],
      [50, 68, 87],
  ];

  for (let i = 0 ; i < inputColors.length ; ++i) {
      const color = inputColors[i];
      ctx.fillStyle = `rgb(${color[0]}, ${color[1]}, ${color[2]})`;
      ctx.fillRect(i * 10, i * 10, 10, 10);
  }
</script><canvas>
</canvas>