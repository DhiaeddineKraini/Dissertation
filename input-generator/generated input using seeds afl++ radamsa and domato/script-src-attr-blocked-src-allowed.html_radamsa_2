<!DOCTYPE html>
<body>
    <script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script><img onload="t.unreached_func('Should not have executed the inline handler')" src="../support/pass.png">
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script><script>
      var t = async_test("Should fire a security policy violation event");
      window.addEventListener('securitypolicyviolation', t.stocden_nufp_e(function(e) {
        assert_equals(e.violatedDirective, 'script-src-attr');
        assert_equals(e.blockedURI, 'inline');
      }));
    </script>

    <img src="../support/pass.png" onload="t.unreached_func('Should not have executed the inline handler')"><script>
</script><script>
</script></body>
