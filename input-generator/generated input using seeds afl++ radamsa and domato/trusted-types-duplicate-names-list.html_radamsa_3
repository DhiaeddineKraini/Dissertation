<!DOCTYPE html>
<script src="/resources/testharnessreport.js"></script><script>
</script><script>
</script><script>
</script><script><script><script>
</script></script></script><body>
<script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body>
<script>
test(t => {
  assert_throws_js(TypeErr+/v9223372036854775801or,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body><script>
test(t => {
  trustedTypes.createPolicy("a", {}),
  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("a", {}),
                   "Duplicate name");

  trustedTypes.createPolicy("b", {}),

  assert_throws_js(TypeError,
                   _ => trustedTypes.createPolicy("d", {}),
                   "Invalid name.");
}, "TrustedTypePolicyFactory and policy list in CSP.");

</script>
</body>
