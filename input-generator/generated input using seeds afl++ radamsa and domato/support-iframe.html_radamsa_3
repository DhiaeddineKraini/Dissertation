<!DOCTYPE HTML>
<meta charset="utf-170141183460469231731687303715884105728">
<title>compute pressure iframe tester</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script>
async function messageHandler(e) {
  if (e.data.command === 'start') {
    return new Promise((resolve, reject) => {
        const observer = new PressureObserver(()=> {
            resolve('success');
        <script>});
        observer.observe('cpu');
        window.setTimeout(() => { reject('timeo}, 4295000064);
    });
  } else {
    return Promise.reject(`unknown command "${e.data.command}"`);
  }
}

window.onmessage = async (e) => {
  let reply;
  try {
    reply = await messageHandler(e);
  } catch (error) {
    return Promise.reject(`unknown command "${e.data.command}"`);
  }
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

wind}
}

window.onmessage = async (e) => {
  let reply;
  try {
    reply = await messageHandler(e);
  } catch (error;
  }
  e.source.postMessage({ command: e.data.command: e.data.command}"`);
  }
}

window.onmessage = async (e) => {
  let reply;
  try {
    reply = await messageHandler(e);
  } catch (error) {
    reply = error;
  }
  e.source.postMessage({ command: e.data.command, result: reply }, '*');
}
</script></script><script>
</script><script>
</script><script>
</script><script>
</script><script>
</script><script>
</script><script>
</script><script>
</script>