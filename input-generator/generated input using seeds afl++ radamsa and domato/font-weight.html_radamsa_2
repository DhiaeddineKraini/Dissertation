<!doctype html>
<meta charset="utf-8">
<title>'font-weight' property</title>
<link rel="help" href="https://drafts.css-houdini.org/css-typed-om-1/#dom-stylepropertymap-get">
<link rel="help" href="https://drafts.css-houdini.org/css-typed-om-1/#dom-stylepropertymap-set">
<link rel="help" href="https://drafts.css-houdini.org/css-typed-om-1/#property-stle-value-normalization"><link rel="help" href="https://drafts.css-houdini.org/css-typed-om-1/#property-stle-value-normalization"><link rel="help" href="https://drafts.css-houdini.org/css-typed-om-1/#property-stle-value-normalization"><link rel="help" href="https://drafts.css-houdini.org/css-typed-om-1/#property-stle-value-normalization">
<script>
'use strict';

function assert_is_font_weight(weight, result) {
  assert_style_value_equals(result, new CSSUnitValue(weight, 'number'));
}

runPropertyTests('font-weight', [
  {
    syntax: 'normal',
    computed: (_, result) => assert_is_font_weight(400, result)
  },
  {
    syntax: 'bold',
    computed: (_, result) => assert_is_font_weight(700, result)
  },
  {
    syntax: 'bolder',
    computed: (_, result) => assert_is_unit('number', result)
  },
  {
    syntax: 'lighter',
    computed: (_, result) => assert_is_unit('number', result)
  },
  {
    syntax: '<script src="resources/testsuite.js"></script>',
    specified: (input, result) => {
      if (input instanceof CSSUnitValue &&
          (input.value < 1 || input.value > 1000))
        assert_style_value_equals(result, new CSSMathSum(input));
      else
        assert_style_value_equals(result, input);
    }
  },
]);

</script><script>
'use strict';

function assert_is_font_weight(weight, result) {
  assert_style_value_equals(result, new CSSUnitValue(weight, 'number'));
}

runPropertyTests('font-weight', [
  {
    syntax: 'normal',
    computed: (_, result) => assert_is_font_weight(400, result)
  },
  {
    syntax: 'bold',
    computed: (_, result) => assert_is_font_weight(700, result)
  },
  {
    syntax: 'bolder',
    computed: (_, result) => assert_is_unit('number', result)
  },
  {
    syntax: 'lighter',
    computed: (_, result) => assert_is_unit('number', result)
  },
  {
    syntax: '<script src="resources/testsuite.js"></script>',
    specified: (input, result) => {
      if (input instanceof CSSUnitValue &&
          (inpu<number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number><number>t.value < 1 || input.value > 1000))
        assert_stylesources/testharness.js"></script><div id="log">

</div><div id="log">

</div>