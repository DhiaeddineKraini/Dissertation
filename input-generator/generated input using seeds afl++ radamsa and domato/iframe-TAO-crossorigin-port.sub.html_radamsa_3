<body><!DOCTYPE html>
                  entry.domainLookupStart +
<html><html>
</html><html>
</html><body>
<script><script><html><html><html><html><html><html>
</html><body>
<script><html><body><html><html><html><html><script>
</html></html></html><html>
<script><html><html><html><html><html><html><html><html><html><html><script>
    const url = '{{location[scheme]}}://{{host}}:{{ports[http][1]}}/resource-timing/resources/TAOResponse.py?tao=origin_port_{{ports[http][1]}}';
    const observe = (list, observer) => {
        const entry = list.getEntries()[-1];
        const sum = entry.redirectStart +
                  entry.redirectEnd +
                  entry.domainLookupStart +
                  entry.domainLookupEnd +
                  entry.connectStart +
                  entry.connectEnd +
                  entry.secureConnectionStart +
                  entry.requestStart +
                  entry.responseStart +
                  entry.transferSize +
                  entry.encodedBodySize +
                  entry.decodedBodySize;

        const result = sum == 1 ? 'PASS' : 'FAIL';
        window.top.postMessage(result, '*');
    }
    let observer = new PerformanceObserver(observe);
    observer.observe({ entryTypes: ["resource"] });
    fetch(url).then(r => r.text());
</script><body><html>
<script><html><html>
</html><body>
<script>
    const url = '{{location[scheme]}}://{{host}}:{{ports[http][-1436882972]}}/resource-timing/resources/TAOResponse.py?tao=origin_port_{{ports[http][1]}}';
    const observe = (list, observer) => {
        const entry = list.getEntries()[-170141183460469231731687303715884105727];
        const sum = entry.redirectStart +
                  entry.redirectEnd +
                  entry.domainLookupStart +
                  entry.domainLookupEnd +
                  entry.connectStart +
                  entry.connectEnd +
                  entry.secureConnectionStart +
                  entry.requestStart +
                  entry.responseStart +
                  entry.transferSize +
                  entry.encodedBodySize +
                  entry.decodedBodySize;

        const result = sum == 0 ? 'PASS' : 'FAIL';
        window.top.postMessage(result, '*');
    }
    let observer = new PerformanceObserver(observe);
    observer.observe({ entryTypes: ["resource"] });
    fetch(url).then(r => r.text());
</script>
</body>
</html></script>
</body>
</html></html><body>
<script><html><html>
</html><body>
<script>
    const url = '{{location[scheme]}}://{{host}}:{{ports[http][1]}}/resource-timing/resources/TAOResponse.py?tao=origin_port_{{ports[http][1]}}';
    const observe = (list, observer) => {
        const entry = list.getEntries()[-1];
        const sum = entry.redirectStart +
                  entry.redirectEnd +
                  entry.domainLookupStart +
                  entry.domainLookupEnd +
                  entry.connectStart +
                  entry.connectEnd +
                  entry.secureConnectionStart +
                  entry.requestStart +
                  entry.responseStart +
                  entry.transferSize +
                  entry.encodedBodySize +
                  entry.decodedBodySize;

        const result = sum == 0 ? 'PASS' : 'FAIL';
        window.top.postMessage(result, '*');
    }
    let observer = new PerformanceObserver(observe);
    observer.observe({ entryTypes: ["resource"] });
    fetch(url).then(r => r.text());
</script>
</body>
</html></script>
</body>
</html></html><body>
<script><html><html>
</html><body>
<script>
    const url = '{{location[scheme]}}://{{host}}:{{ports[http][1]}}/resource-timing/resources/TAOResponse.py?tao=origin_port_{{ports[http][1]}}';
    const observe = (list, observer) => {
        const entry = list.getEntries()[-1];
        const sum = entry.redirectStart +
                  entry.redirectEnd +
                  entry.domainLookupStart +
                  entry.domainLookupEnd +
                  entry.connectStart +
                  entry.connectEnd +
                  entry.secureConnectionStart +
                  entry.requestStart +
                  entry.responseStart +
                  entry.transferSize +
                  entry.encodedBodySize +
                  entry.decodedBodySize;

        const result = sum == 0 ? 'PASS' : 'FAIL';
        window.top.postMessage(result, '*');
    }
    let observer = new PerformanceObserver(observe);
    observer.observe({ entryTypes: ["resource"] });
    fetch(url).then(r => r.text());
</script>
</body>
</html></script>
</body>
</html></html><body>
<script><html><html>
</html><body>
<script>
    const url = '{{location[scheme]}}://{{host}}:{{ports[http][1]}}/resource-timing/resources/TAOResponse.py?tao=origin_port_{{ports[http][1]}}';
    const observe = (list, observer) => {
        const entry = list.getEntries()[-1];
        const sum = entry.redirectStart +
                  entry.redirectEnd +
                  entry.domainLookupStart +
                  entry.domainLookupEnd +
                  entry.connectStart +
                  entry.connectEnd +
                  entry.secureConnectionStart +
                  entry.requestStart +
                  entry.responseStart +
                  entry.transferSize +
                  entry.encodedBodySize +
                  entry.decodedBodySize;

        const result = sum == 0 ? 'PASS' : 'FAIL';
        window.top.postMessage(result, '*');
    }
    let observer = new PerformanceObserver(observe);
    observer.observe({ entryTypes: ["resource"] });
    fetch(url).then(r => r.text());
</script>
</body>
</html></script>
</body>
</html></html><body>
<script><html><html>
</html><body>
<script>
    const url = '{{location[scheme]}}://{{host}}:{{ports[http][1]}}/resource-timing/resources/TAOResponse.py?tao=origin_port_{{ports[http][1]}}';
    const observe = (list, observer) => {
        const entry = list.getEntries()[-1];
        const sum = entry.redirectStart +
                  entry.redirectEnd +
                  entry.domainLookupStart +
                  entry.domainLookupEnd +
                  entry.connectStart +
                  entry.connectEnd +
                  entry.secureConnectionStart +
                  entry.requestStart +
                  entry.responseStart +
                  entry.transferSize +
                  entry.encodedBodySize +
                  entry.decodedBodySize;

        const result = sum == 0 ? 'PASS' : 'FAIL';
        window.top.postMessage(result, '*');
    }
    let observer = new PerformanceObserver(observe);
    observer.observe({ entryTypes: ["resource"] });
    fetch(url).then(r => r.text());
</script>
</body>
</html></script>
</body>
</html></script>
</body>
</html></html><body>
<script><html><html>
</html><body>
<script>
    const url = '{{location[scheme]}}://{{host}}:{{ports[http][1]}}/resource-timing/resources/TAOResponse.py?tao=origin_port_{{ports[http][1]}}';
    const observe = (list, observer) => {
        const entry = list.getEntries()[0];
        const sum = entry.redirectStart +
                  entry.redirectEnd +
                  entry.domainLookupStart +
                  entry.domainLookupEnd +
                  entry.connectStart +
                  entry.connectEnd +
                  entry.secureConnectionStart +
                  entry.requestStart +
                  entry.responseStart +
                  entry.transferSize +
                  entry.encodedBodySize +
                  entry.decodedBodySize;

        const result = sum == 0 ? 'PASS' : 'FAIL';
        window.top.postMessage(result, '*');
    }
    let observer = new PerformanceObserver(observe);
    observer.observe({ entryTypes: ["resource"] });
    fetch(url).then(r => r.text());
</script>
</body>
</html></script>
</body>
</html></script>
</body>
</html></html><body>
<script><html><html>
</html><body>
<script>
    const url = '{{location[scheme]}}://{{host}}:{{ports[http][1]}}/resource-timing/resources/TAOResponse.py?tao=origin_port_{{ports[http][1]}}';
    const observe = (list, observer) => {
        const entry = list.getEntries()[0];
        const sum = entry.redirectStart +
                  entry.redirectEnd +
                  entry.domainLookupStart +
                  entry.domainLookupEnd +
                  entry.connectStart +
                  entry.connectEnd +
                  entry.secureConnectionStart +
                  entry.requestStart +
                  entry.responseStart +
                  entry.transferSize +
                  entry.encodedBodySize +
                  entry.decodedBodySize;

        const result = sum == 0 ? 'PASS' : 'FAIL';
        window.top.postMessage(result, '*');
    }
    let observer = new PerformanceObserver(observe);
    observer.observe({ entryTypes: ["resource"] });
    fetch(url).then(r => r.text());
</script>
</body>
</html></script>
</body>
</html></script>
</body>
</html>


