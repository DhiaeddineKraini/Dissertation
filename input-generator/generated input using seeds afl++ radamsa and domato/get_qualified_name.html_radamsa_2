<!DOCTYPE HTML>
<script src="/resources/WebIDLParser.js"></script>
<title>IdlInterface.prototype.get_qualified_name()</title>
<div><div id="log"></div></div>
<script src="/resources/testharnessreport.js"></script>
<script src="/resources/WebIDLParser.js"></script><script src="/resources/WebIDLParser.js"></script><script src="/resources/WebIDLParser.js"></script><script src="/resources/WebIDLParser.js"></script><script src="/resources/WebIDLParser.js"></script><script src="/resources/WebIDLParser.js"></script><script src="/resources/WebIDLParser.js"></script><script src="/resources/WebIDLParser.js"></script><script src="/resources/testharness.js"></script><script src="/resources/WebIDLParser.js"></script><script src="/resources/WebIDLParser.js"></script>
<script src="/resources/idlharness.js"></script>
<script src="../../../idl-helper.js"></script><div id="log">
</div><div id="log">
</div><script><script><script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test<div id="log">(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script><script><script><script><script><div><script><script><script><script><script><div><script><script><script><script><script><div><script><script><script><script><script><div><script><script><script><script><script><div><script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script></script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script></script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script></script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script></script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script></script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script></script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></script></script></script><script><script><script><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface A { };');
    assert_equals(i.get_qualified_name(), "A");
}, 'Interface does not have LegacyNamespace.');

test(function() {
    var i = interfaceFrom('[LegacyNamespace=Foo] interface A { }; namespace Foo { };');
    assert_equals(i.get_qualified_name(), "Foo.A");
}, 'Interface has LegacyNamespace');
</script></div><div><script><div><script><div><script>
"use strict";
test(function() {
    var i = interfaceFrom('interface has LegacyNamespace');
</script></div></script></div></script></div></script></script></script></script></script></script></script>
