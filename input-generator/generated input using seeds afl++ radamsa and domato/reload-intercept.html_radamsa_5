<!doctype html>
<script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script></script><script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script></script><script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script></script><script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script></script><script><script><script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script></script><script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script></script><script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script></script><script><script>
promise_test(async t => {
  navigation.onnavigate = e => e.intercept({ handler: () => Promise.resolve({ abc: 'def' }) });

  const result = navigation.reload();

  await assertBothFulfill(t, result, navigation.currentEntry);
}, "reload() and intercept() with a fulfilled promise");
</script></script></script></script>
<script src="resources/helpers.js"></script>

<script><script src="/resources/testharness.js"></script></script><script><script src="/resources/testharness.js"></script></script><script><script src="/resources/testharness.js"></script></script><script><script src="/resources/testharness.js"></script></script><script><script><script><script><script><script><script><script><script src="/resources/testharness.js"></script></script></script></script></script></script></script></script></script>
