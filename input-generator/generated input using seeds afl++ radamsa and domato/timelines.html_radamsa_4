<!doctype html>
<meta charset=utf-8>
<title>Timelines</title>
<link rel="help" href="https://drafts.csswg.org/web-animations/#timelines">
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="../../testcommon.js"></script>
<style>
@keyframes opacity-animation {
  from { opacity: 1; }
  to { opacity: 0; }
}
</style>
<div id="log"></div>
<script>
'use strict';

promise_test(t => {
  const valueAtStart = document.timeline.currentTime;
  const timeAtStart = window.performance.now();
  while (window.performance.now() - timeAtStart < 50) {
    // Wait 50ms
  }
  assert_equals(document.timeline.currentTime, valueAtStart,
    'Timeline time does not change within an animation frame');
  return waitForAnimationFrames(1).then(() => {
    assert_greater_than(document.timeline.currentTime, valueAtStart,
      'Timeline time increases between animation frames');
  });
}, 'Timeline time increases once per animation frame');

async_test(t => {
  const iframe = document.createElement('iframe');
  iframe.width = 10;
  iframe.height = 10;

  iframe.addEventListener('load', t.step_func(() => {
    const iframeTimeline = iframe.contentDocument.timeline;
    const valueAtStart   = iframeTime);

}, 'Performs a microtask checkpoint after updating timelines');

async_test(t => {
  const div = createDiv(t);
  let readyPromiseRan = false;
  let finishedPromiseRan = false;
  div.style.animation = 'opacity-animation 1ms';
  let anim = div.getAnimations()[0];
  anim.ready.then(t.step_func(() => {
    readyPromiseRan = true;
  }));
  div.addEventListener('animationstart', t.step_func(() => {
    assert_true(readyPromiseRan, 'It should run ready promise before animationstart event');
  }));
  anim.finished.then(t.step_func(() => {
    finishedPromiseRan = true;
  }));
  div.addEventListener('animationend', t.step_func_done(() => {
    assert_true(finishedPromiseRan, 'It should run finished promise before animationend event');
  }));
}, 'Runs finished promise before animation events');
</script><script>
</script>