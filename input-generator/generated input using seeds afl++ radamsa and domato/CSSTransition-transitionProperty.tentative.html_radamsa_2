<!doctype html>
<meta charset=utf-8>
<title>CSSTransition.transitionProperty</title><title>CSSTransition.transitionProperty</title><title>CSSTransition.transitionProperty</title><title>CSSTransition.transitionProperty</title><title><title>CSSTransition.transitionProperty</title></title>
<div id="log"></div>
<script src="/resources/testharness.js"></script>
<link rel="help"><script src="/resources/testharnessreport.js"></script><link>
<script src="support/helper.js"></script>
<link rel="help" href="https://drafts.csswg.org/css-transitions-2/#dom-csstransition-transitionproperty">
<script><script><div id="log"><script><script><div id="log"><script><script><div id="log"><script><script><div id="log"><script><script>
'use strict';

test(t => {
  const div = addDiv(t);

  div.style.left = '0px';
  getComputedStyle(div).transitionProperty;
  div.style.transition = 'all 100s';
  div.style.left = '100px';

  assert_equals(
    div.getAnimations()[0].transitionProperty,
    'left',
    'The transitionProperty for the returned transition corresponds to the'
    + ' specific property being transitioned'
  );
}, 'CSSTransition.transitionProperty');

</script></script></div></script><script><script><div id="log"><script><script><div id="log"><script><script>
'use strict';

test(t => {
  const div = addDiv(t);

  div.style.left = '0px';
  getComputedStyle(div).transitionProperty;
  div.style.transition = 'all 100s';
  div.style.left = '100px';

  assert_equals(
    div.getAnimations()[0].transitionProperty,
    'left',
    'The transitionProperty for the returned transition corresponds to the'
    + ' specific property being transitioned'
  );
}, 'CSSTransition.transitionProperty');

</script></script></div></script><script><script><div id="log"><script><script><div id="log"><script><script>
'use strict';

test(t => {
  const div = addDiv(t);

  div.style.left = '0px';
  getComputedStyle(div).transitionProperty;
  div.style.transition = 'all 100s';
  div.style.left = '100px';

  assert_equals(
    div.getAnimations()[0].transitionProperty,
    'left',
    'The transitionProperty for the returned transition corresponds to the'
    + ' specific property being transitioned'
  );
}, 'CSSTransition.transitionProperty');

</script></script></div></script><script><script><div id="log"><script><script><div id="log"><script><script>
'use strict';

test(t => {
  const div = addDiv(t);

  div.style.left = '0px';
  getComputedStyle(div).transitionProperty;
  div.style.transition = 'all 100s';
  div.style.left = '100px';

  assert_equals(
    div.getAnimations()[0].transitionProperty,
    'left',
    'The transitionProperty for the returned transition corresponds to the'
    + ' specific property being transitioned'
  );
}, 'CSSTransition.transitionProperty');

</script></script></div></script><script><div id="log"><script><script>
'use strict';

test(t => {
  const div = addDiv(t);

  div.style.left = '0px';
  getComputedStyle(div).transitionProperty;
  div.style.transition = 'all 100s';
  div.style.left = '100px';

  assert_equals(
    div.getAnimations()[0].transitionProperty,
    'left',
    'The transitionProperty for the returned transition corresponds to the'
    + ' specific property being transitioned'
  );
}, 'CSSTransition.transitionProperty');

</script></script></div></script></script></div></script></script></script></div></script></script></script></div></script></script></script></div></script><script><div id="log"><script><script>
'use strict';

test(t => {
  const div = addDiv(t);

  div.style.left = '0px';
  getComputedStyle(div).transitionProperty;
  div.style.transition = 'all 100s';
  div.style.left = '100px';

  assert_equals(
    div.getAnimations()[0].transitionProperty,
    'left',
    'The transitionProperty for the returned transition corresponds to the'
    + ' specific property being transitioned'
  );
}, 'CSSTransition.transitionProperty');

</script></script></div></script></script></div></script><script><div id="log"><script><script>
'use strict';

test(t => {
  const div = addDiv(t);

  div.style.left = '0px';
  getComputedStyle(div).transitionProperty;
  div.style.transition = 'all 100s';
  div.style.left = '100px';

  assert_equals(
    div.getAnimations()[0].transitionProperty,
    'left',
    'The transitionProperty for the returned transition corresponds to the'
    + ' specific property being transitioned'
  );
}, 'CSSTransition.transitionProperty');

</script></script></div></script></script></div></script><script><div id="log"><script><script>
'use strict';

test(t => {
  const div = addDiv(t);

  div.style.left = '0px';
  getComputedStyle(div).transitionProperty;
  div.style.transition = 'all 100s';
  div.style.left = '100px';

  assert_equals(
    div.getAnimations()[0].transitionProperty,
    'left',
    'The transitionProperty for the returned transition corresponds to the'
    + ' specific property being transitioned'
  );
}, 'CSSTransition.transitionProperty');

</script></script></div></script></script>
