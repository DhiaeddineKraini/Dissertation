[15:50:14][INFO] fuzzer-config: initialized global rngs with seed: 9999
[15:50:14][INFO] fuzzer-config: configuration loaded and validated successfully
[15:50:14][INFO] detection-advanced: [DETECTION] Deep & Detailed Reporting.
[15:50:14][INFO] detection-advanced: Processing batch 1 (4 files)
[15:50:44][INFO] detection-advanced: Resource throttling disabled, forcing concurrency to 1
[15:50:44][INFO] detection-advanced: [DETECTION] Start => mutated_0001.html
/home/dhia/browser-fuzzer/Dissertation/logger/fuzzing/detection.py:628: DeprecationWarning: set_timeout() in RemoteConnection is deprecated, set timeout to ClientConfig instance in constructor instead
  RemoteConnection.set_timeout(720) # long timeout for connection
[15:51:00][INFO] detection-advanced: Testing file: file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html
[15:51:02][INFO] detection-advanced: Document readyState: complete
[15:51:16][INFO] detection-advanced: Resource Usage: CPU=51.40%, Memory=0.00 MB, Disk Read=3.68 MB, Disk Write=0.25 MB
[15:51:29][DEBUG] detection-advanced: [COVERAGE] start_js_coverage: Starting coverage collection...
[15:51:29][DEBUG] detection-advanced: [COVERAGE] start_js_coverage: Coverage collection started successfully.
[15:51:29][DEBUG] detection-advanced: [COVERAGE] stop_js_coverage: Stopping coverage and taking data...
[15:51:29][DEBUG] detection-advanced: [COVERAGE] stop_js_coverage: Coverage data collected, 8 scripts.
[15:53:09][WARNING] detection-advanced:  => anomaly => console_errors_warnings => {'errors_warnings': [{'level': 'SEVERE', 'type': 'general', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 2 The Content Security Policy 'default-src 'self' 'unsafe-inline'' was delivered via a <meta> element outside the document's <head>, which is disallowed. The policy has been ignored.", 'source': 'security', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 2:2069 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 2:2322 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 2:2601 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 10:185 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 41:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 43:185 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 43:432 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 48:186 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 86:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 88:185 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 88:620 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0001.html 88:1425 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}], 'error_counts': {'general': 1, 'javascript_error': 12}}
[15:53:09][WARNING] detection-advanced:  => anomaly => missing_or_invalid_security_headers => {'x-content-type-options': 'Missing', 'x-frame-options': 'Missing', 'strict-transport-security': 'Missing', 'content-security-policy': 'Missing', 'x-xss-protection': 'Missing'}
[15:53:09][WARNING] detection-advanced:  => anomaly => storage_error => Message: invalid cookie domain
  (Session info: chrome=135.0.7019.0)
Stacktrace:
#0 0x5f803c0f40b6 <unknown>
#1 0x5f803f37cce8 <unknown>
#2 0x5f803f3417c9 <unknown>
#3 0x5f803c200e80 <unknown>
#4 0x5f803c377b90 <unknown>
#5 0x5f803c307a25 <unknown>
#6 0x5f803c35c58e <unknown>
#7 0x5f803c35b5d9 <unknown>
#8 0x5f803c30ab62 <unknown>
#9 0x5f803c2a4fc9 <unknown>
#10 0x5f803c2a1b21 <unknown>
#11 0x5f803c2a466d <unknown>
#12 0x5f803c1c0d67 <unknown>
#13 0x5f803f175bac <unknown>
#14 0x5f803f237dd2 <unknown>
#15 0x5f803f2361bc <unknown>
#16 0x5f803f2390eb <unknown>
#17 0x5f803f1b7459 <unknown>
#18 0x5f803f23a3f0 <unknown>
#19 0x5f803f136a31 <unknown>
#20 0x5f803f2e995c <unknown>
#21 0x5f803f2ea1e0 <unknown>
#22 0x5f803f32fada <unknown>
#23 0x5f803c14ab87 <unknown>
#24 0x78c35b694ac3 <unknown>
#25 0x78c35b726850 <unknown>

[15:53:09][WARNING] detection-advanced:  => anomaly => mouseover_event_failed => Mouseover event handler not executed on element
[15:53:09][WARNING] detection-advanced:  => anomaly => missing_lang_attribute => The 'lang' attribute is missing from the <html> tag.
[15:53:09][WARNING] detection-advanced:  => anomaly => potential_xss_in_html => [{'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script>function triggerFuzz() {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script async="">\n        window.__jsCoverage = new Proxy({}, {\n            get(t, p) { return t[p] || 0 },\n            set(t, p, v) { t[p] = (t[p] || 0) + 1; return true }\n        });\n        </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}]
[15:53:09][INFO] detection-advanced: Finished => mutated_0001.html, took 144.91s
[15:53:09][INFO] detection-advanced: [DETECTION] Start => mutated_0002.html
[15:53:30][INFO] detection-advanced: Testing file: file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html
[15:53:38][INFO] detection-advanced: Document readyState: complete
[15:54:18][INFO] detection-advanced: Resource Usage: CPU=76.50%, Memory=0.00 MB, Disk Read=0.33 MB, Disk Write=0.05 MB
[15:55:07][DEBUG] detection-advanced: [COVERAGE] start_js_coverage: Starting coverage collection...
[15:55:07][DEBUG] detection-advanced: [COVERAGE] start_js_coverage: Coverage collection started successfully.
[15:55:07][DEBUG] detection-advanced: [COVERAGE] stop_js_coverage: Stopping coverage and taking data...
[15:55:07][DEBUG] detection-advanced: [COVERAGE] stop_js_coverage: Coverage data collected, 8 scripts.
[15:56:48][WARNING] detection-advanced:  => anomaly => console_errors_warnings => {'errors_warnings': [{'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 55:40 Uncaught DOMException: Failed to execute 'createElement' on 'Document': The tag name provided ('d\x01v') is not a valid name.", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 65:58 Uncaught SyntaxError: Identifier 'potentiallyDanglingRef' has already been declared", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 103:3414 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 103:3690 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 103:4039 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 103:4556 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 106:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 137:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 139:209 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 139:480 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 144:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 182:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 194:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 194:981 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 194:2104 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 197:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 228:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 230:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 230:503 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 235:209 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 273:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 275:208 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 275:816 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 280:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 280:575 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 280:975 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 318:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 320:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 320:633 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 335:208 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 335:455 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 366:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 368:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 368:479 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 368:3916 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 368:4215 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 368:4494 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 368:4851 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 405:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 436:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 441:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 443:257 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 443:10684 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 443:10955 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 443:11319 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 443:12779 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 443:13353 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0002.html 443:14043 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}], 'error_counts': {'javascript_error': 48}}
[15:56:48][WARNING] detection-advanced:  => anomaly => missing_or_invalid_security_headers => {'x-content-type-options': 'Missing', 'x-frame-options': 'Missing', 'strict-transport-security': 'Missing', 'content-security-policy': 'Missing', 'x-xss-protection': 'Missing'}
[15:56:48][WARNING] detection-advanced:  => anomaly => storage_error => Message: invalid cookie domain
  (Session info: chrome=135.0.7019.0)
Stacktrace:
#0 0x5cbf6ef830b6 <unknown>
#1 0x5cbf7220bce8 <unknown>
#2 0x5cbf721d07c9 <unknown>
#3 0x5cbf6f08fe80 <unknown>
#4 0x5cbf6f206b90 <unknown>
#5 0x5cbf6f196a25 <unknown>
#6 0x5cbf6f1eb58e <unknown>
#7 0x5cbf6f1ea5d9 <unknown>
#8 0x5cbf6f199b62 <unknown>
#9 0x5cbf6f133fc9 <unknown>
#10 0x5cbf6f130b21 <unknown>
#11 0x5cbf6f13366d <unknown>
#12 0x5cbf6f04fd67 <unknown>
#13 0x5cbf72004bac <unknown>
#14 0x5cbf720c6dd2 <unknown>
#15 0x5cbf720c51bc <unknown>
#16 0x5cbf720c80eb <unknown>
#17 0x5cbf72046459 <unknown>
#18 0x5cbf720c93f0 <unknown>
#19 0x5cbf71fc5a31 <unknown>
#20 0x5cbf7217895c <unknown>
#21 0x5cbf721791e0 <unknown>
#22 0x5cbf721beada <unknown>
#23 0x5cbf6efd9b87 <unknown>
#24 0x7a83cb694ac3 <unknown>
#25 0x7a83cb726850 <unknown>

[15:56:48][WARNING] detection-advanced:  => anomaly => mouseover_event_failed => Mouseover event handler not executed on element
[15:56:48][WARNING] detection-advanced:  => anomaly => missing_lang_attribute => The 'lang' attribute is missing from the <html> tag.
[15:56:48][WARNING] detection-advanced:  => anomaly => slow_page_load => Page load time exceeds threshold: 7757 ms
[15:56:48][WARNING] detection-advanced:  => anomaly => potential_xss_in_html => [{'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script async="" data-uncovered-attr="fuzz" onerror="triggerFuzz()">\n            try {\n                window.triggerFuzz = () => {\n                    console.log(\'Safe triggerFuzz execution\');\n                    document.dispatchEvent(new Event(\'fuzz\'));\n                };\n            } catch(e) {\n                console.error(\'Fuzz setup failed:\', e);\n            }\n            </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script>function triggerFuzz() {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script async="">\n        window.__jsCoverage = new Proxy({}, {\n            get(t, p) { return t[p] || 0 },\n            set(t, p, v) { t[p] = (t[p] || 0) + 1; return true }\n        });\n        </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b4bae449-47b1-4a9d-bf31-4b89ec691bc8" data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ac8fd3f8-bc9b-452c-8abb-1debff8cecec" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3143adc5-cb76-4b55-ab60-38dfb2a6e247" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="03dc8808-29c1-4761-a838-4ad694fd47cc" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="1456a682-0e8c-4cad-b9b6-4e908d87dc3a" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="8f4cd447-357b-4b41-a152-d56679eac473" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c422a4f7-6c9e-41f2-8a3e-3e295c55780b" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 1');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}]
[15:56:48][INFO] detection-advanced: Finished => mutated_0002.html, took 218.37s
[15:56:48][INFO] detection-advanced: [DETECTION] Start => mutated_0003.html
[15:57:08][INFO] detection-advanced: Testing file: file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html
[15:58:57][INFO] detection-advanced: Document readyState: complete
[16:01:42][INFO] detection-advanced: Resource Usage: CPU=51.50%, Memory=0.00 MB, Disk Read=0.00 MB, Disk Write=0.07 MB
[16:08:55][DEBUG] detection-advanced: [COVERAGE] start_js_coverage: Starting coverage collection...
[16:08:55][DEBUG] detection-advanced: [COVERAGE] start_js_coverage: Coverage collection started successfully.
[16:08:55][DEBUG] detection-advanced: [COVERAGE] stop_js_coverage: Stopping coverage and taking data...
[16:08:56][DEBUG] detection-advanced: [COVERAGE] stop_js_coverage: Coverage data collected, 8 scripts.
[16:10:06][WARNING] detection-advanced:  => anomaly => console_errors_warnings => {'errors_warnings': [{'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 17:1994 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 17:2270 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 17:2595 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 20:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 51:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 53:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 53:480 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 58:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 96:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 98:209 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 98:1109 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 98:2182 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 101:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 101:633 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 103:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 134:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 136:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 136:504 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 136:751 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 141:209 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 179:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 193:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 193:839 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 198:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 236:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 238:257 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 251:209 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 253:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 284:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 286:255 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 286:526 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 310:2783 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 310:3036 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 310:3362 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 371:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 412:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 417:234 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 429:116 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 429:11823 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 429:12094 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 429:17286 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 429:17882 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 429:18293 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 439:93 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 439:456 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 439:2125 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 439:3559 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 439:4179 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 509:40 Uncaught DOMException: Failed to execute 'createElement' on 'Document': The tag name provided ('d\x01v') is not a valid name.", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 519:82 Uncaught SyntaxError: Identifier 'potentiallyDanglingRef' has already been declared", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 557:3840 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 557:4116 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 557:4395 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 557:4962 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 557:5373 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 557:5987 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 560:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 591:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 593:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 593:551 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 598:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 636:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 694:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 706:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 706:1150 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 706:2392 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 709:302 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 709:620 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 740:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 742:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 742:551 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 759:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 797:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 799:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 799:887 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 804:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 804:575 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 804:975 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 842:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 844:257 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 844:704 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 869:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 869:527 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 900:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:575 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:846 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:1293 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:1588 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:1859 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:5625 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:5924 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:6203 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:6607 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:13278 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:13600 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:13879 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 902:14260 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 949:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 980:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 985:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 987:257 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 997:2357 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 997:2628 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 997:2899 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 997:3310 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 997:5099 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 997:5743 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 997:6480 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1007:106 Uncaught SyntaxError: Identifier 'potentiallyDanglingRef' has already been declared", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1046:179 Uncaught SyntaxError: Identifier 'potentiallyDanglingRef' has already been declared", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1084:5476 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1084:5752 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1084:6199 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1084:6863 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1087:257 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1118:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1120:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1120:549 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1125:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1163:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1175:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1175:1269 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1195:1034 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1195:1481 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1195:6034 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1195:6310 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1195:6757 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1195:7123 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1195:7714 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1210:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1241:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1243:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1243:503 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1248:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1286:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1310:119 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1310:943 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1310:2182 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1310:2652 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1313:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1344:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1346:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1346:527 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1351:281 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1401:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1403:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1403:864 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1408:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1408:575 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1408:999 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1446:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1448:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1448:703 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1463:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1463:527 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1530:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1544:116 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1544:387 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1544:4253 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1544:4552 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1544:4831 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1544:5210 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1603:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1653:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1684:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1689:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1703:295 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1703:613 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:10827 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:11098 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:11630 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:12095 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:13791 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:14086 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:14528 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:15174 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:15934 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1725:16422 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1745:3366 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1745:3642 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1745:4088 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1745:4725 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1748:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1748:527 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1779:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1781:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1781:527 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1786:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1846:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1858:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1858:1173 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1858:2343 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1861:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1892:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1894:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1894:503 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1899:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1937:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1949:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1949:1128 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1952:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1983:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1985:232 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 1985:503 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2000:116 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2038:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2050:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2050:1128 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2053:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2084:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2086:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2086:527 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2091:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2149:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2163:264 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2163:918 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2163:1314 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2168:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2168:575 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2168:975 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2206:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2220:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2220:727 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2220:1150 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2225:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2263:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2275:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2280:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2284:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2322:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2334:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2349:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2349:551 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2380:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2394:264 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2394:535 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2394:5209 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2394:5485 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2394:5907 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2394:6273 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2394:6887 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2394:7230 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2441:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2515:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2516:7953 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2516:8275 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2516:8554 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2516:8833 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2516:9237 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2519:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2550:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2552:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2552:527 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2555:233 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2586:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2588:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2588:575 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2635:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2705:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2748:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2789:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2820:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2851:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2877:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2903:4 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2937:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2937:575 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2937:999 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2951:329 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2951:600 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2951:871 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2955:328 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2959:256 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2963:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2965:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2965:727 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2967:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 2981:280 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3015:83 Uncaught SyntaxError: Identifier 'potentiallyDanglingRef' has already been declared", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3156:106 Uncaught SyntaxError: Identifier 'potentiallyDanglingRef' has already been declared", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3194:83 Uncaught SyntaxError: Identifier 'potentiallyDanglingRef' has already been declared", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3260:2044 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3260:2339 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3260:2854 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3260:5827 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3260:6967 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3264:2103 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3264:2350 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3264:3789 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3264:4060 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:1789 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:3519 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:3814 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:4224 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:4519 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:4984 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:5279 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:6065 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:6336 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:7002 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:7963 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:8513 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:9230 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:19651 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:22316 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:24546 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:27365 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:27783 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:28201 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:28892 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:29491 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:31163 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:31551 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:33351 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:35071 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:37935 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:43668 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:45035 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:47371 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:47666 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3278:48823 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3288:2460 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3298:6537 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3298:8168 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3298:8579 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:116 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:578 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:965 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:2634 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:2952 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:4250 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:4645 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:5127 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:5865 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3310:8191 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3322:536 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3322:935 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3322:1301 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3322:3852 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3322:4355 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}, {'level': 'SEVERE', 'type': 'javascript_error', 'message': "file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0003.html 3322:5173 Uncaught SyntaxError: Unexpected token '<'", 'source': 'javascript', 'url': ''}], 'error_counts': {'javascript_error': 342}}
[16:10:06][WARNING] detection-advanced:  => anomaly => missing_or_invalid_security_headers => {'x-content-type-options': 'Missing', 'x-frame-options': 'Missing', 'strict-transport-security': 'Missing', 'content-security-policy': 'Missing', 'x-xss-protection': 'Missing'}
[16:10:06][WARNING] detection-advanced:  => anomaly => storage_error => Message: invalid cookie domain
  (Session info: chrome=135.0.7019.0)
Stacktrace:
#0 0x59a664de30b6 <unknown>
#1 0x59a66806bce8 <unknown>
#2 0x59a6680307c9 <unknown>
#3 0x59a664eefe80 <unknown>
#4 0x59a665066b90 <unknown>
#5 0x59a664ff6a25 <unknown>
#6 0x59a66504b58e <unknown>
#7 0x59a66504a5d9 <unknown>
#8 0x59a664ff9b62 <unknown>
#9 0x59a664f93fc9 <unknown>
#10 0x59a664f90b21 <unknown>
#11 0x59a664f9366d <unknown>
#12 0x59a664eafd67 <unknown>
#13 0x59a667e64bac <unknown>
#14 0x59a667f26dd2 <unknown>
#15 0x59a667f251bc <unknown>
#16 0x59a667f280eb <unknown>
#17 0x59a667ea6459 <unknown>
#18 0x59a667f293f0 <unknown>
#19 0x59a667e25a31 <unknown>
#20 0x59a667fd895c <unknown>
#21 0x59a667fd91e0 <unknown>
#22 0x59a66801eada <unknown>
#23 0x59a664e39b87 <unknown>
#24 0x7f5930094ac3 <unknown>
#25 0x7f5930126850 <unknown>

[16:10:06][WARNING] detection-advanced:  => anomaly => mouseover_event_failed => Mouseover event handler not executed on element
[16:10:06][WARNING] detection-advanced:  => anomaly => missing_lang_attribute => The 'lang' attribute is missing from the <html> tag.
[16:10:06][WARNING] detection-advanced:  => anomaly => slow_page_load => Page load time exceeds threshold: 107887 ms
[16:10:06][WARNING] detection-advanced:  => anomaly => potential_xss_in_html => [{'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script>function triggerFuzz() {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script async="">\n        window.__jsCoverage = new Proxy({}, {\n            get(t, p) { return t[p] || 0 },\n            set(t, p, v) { t[p] = (t[p] || 0) + 1; return true }\n        });\n        </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz(!" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b55ae3e6-9d8c-4a63-8c4d-2cf93f342de1" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b55ae3e6-9d8c-4a63-8c4d-2cf93f342de1" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="TriggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 2\');" data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 2\');" data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="trifgerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="function handleEvent() {\n    try {\n        try {\n        const res = document.body.appendChild(document.createElement(\'div\'));\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9d71ec60-53e5-4f82-855a-0e05f850d9d7" data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="tri\'gerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="function handleEvent() {\n    try {\n        try {\n        new ArrayBuffer(1e6)\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFurz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        const res = window.mutationCounter++;\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        const res = window.mutationCounter++;\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="fd26ac7a-f973-4bfb-80ef-f5a0641c2475" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        const res = document.body.appendChild(document.createElement(\'div\'));\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="function handleEvent() {\n    try {\n        try {\n        window.mutationCounter++\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="86101dc5-ba91-4cac-a7c0-ac3ce2a302b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="2ca0ba83-fb00-4f57-bf97-c92d5aec6881" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="7bf04f27-c7e3-411e-8077-f19182b18583" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        const res = new ArrayBuffer(1e6);\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="80e78f6f-5204-4ac5-a04a-82685ae4afd2" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script async="" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n            try {\n                window.triggerFuzz = () => {\n                    console.log(\'Safe triggerFuzz execution\');\n                    document.dispatchEvent(new Event(\'fuzz\'));\n                };\n            } catch(e) {\n                console.error(\'Fuzz setup failed:\', e);\n            }\n            </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-entangled="2e6b4952-b3a2-4982-9b2a-e51000a58c94" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="281eb29e-f8a7-44be-a6ed-ab9339bc0ad1" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggeRFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz,)">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggeRFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz,)">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerF5zz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="088aacaa-97df-4af6-bad9-04d704d2de94" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b4bae449-47b1-4a9d-bf3�-4b89ec691bc8" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="fff509ab-1c43-4b02-9839-f9d53935f664" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="fff509ab-1c43-4b02-9839-f9d53935f664" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ac8fd3f8-bc9b-452c-8abb-1debff8cecec" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3143adc5-cb76-4b55-ab60-38dfb2a6e247" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerGuzz()" onblur="triggerFuzz()" onerror="trigcerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerGuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="trigGerFuzz()" onerror="TriggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz(\t">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd�72-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz�)" onblur="triggerFuzx()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="03dc8808-29c1-4761-a838-4ad694fd47cc" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="7cc71b1e-cc8a-4ab2-8191-24ef105216d5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="1456a682-�e8c-4cad-b9b6-4e908d87dc3a" data-uncovered-attr="fuzz" onabort="triggerFuz{()" onblur="triggerFuzz()" onerror="triggmrFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c25c10a0-1e70-4f01-a48b-2753a75b88c0" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="8f4cd447-357b-4b41-a152-d56679eac473" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerF}zz()" onblur="triggerFuzz()" onerror="triggerFuzz(9">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c422a4f7-6c9e-41f2-8a3e-3e295c55780b" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" load="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" load="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="trIggerFuzz()" onerror="triggErFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" load="function handleEvent() {\n    try {\n        try {\n        document.querySelectorAll(\'*\')\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="trIggerFuzz()" onerror="triggErFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="a70b8781-a573-4cea-8a3d-07cb9f0891b6" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerfuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="a8354c0b-73ab-4f3b-ac83-e340248b61ca" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz\x08)">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="trigger\x06uzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="a2d7a43f-36a6-4f15-b6f0-241c45b71c96" data-uncovered-attr="fuzz" onabort="trhggerFuzz()" onblur="triggerFuzz()" onerror="trigger\x06uzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="trigferFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" mouseover="function handleEvent() {\n    try {\n        try {\n        window.mutationCounter++\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="e2f2ade7-bd62-4dfa-90de-340231d4c6ea" data-uncovered-attr="fuzz" mouseover="function handleEvent() {\n    try {\n        try {\n        window.mutationCounter++\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="be134fdc-43fd-47b4-ae01-068a0f9b8f17" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="trigoerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggErFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz�)" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="alert(\'Interactive mutation at step 2\');" onabort="trhggerFuzz()" onblur="triggerFuzz()" onerror="trigger\x06uzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="trigferFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="trigferFuzz()" onerror="tri\'gerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="trigge2Fuzz()" onerror="triggerFuzzh)">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b4bae449-47b1-4a9d-bf31-4b89ec691bc8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="919ad190-44b8-4c70-821b-288321ffa10c" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="4c9428a0-464c-497e-857a-a4055c827dab" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ac8fd3f8-bc9b-452c-8Abb-1debff8cecec" data-uncovered-attr="fuzz" onabort="trigoerFuzz()" onblur="triggerFuzz()" onerror="traggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="function handleEvent() {\n    try {\n        try {\n        const res = window.mutationCounter++;\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3143adc5-cb76-4b55-ab60-38dfb2a6e247" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="00f6a554-ffe5-4739-a1e7-59c51c7a670f" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ab3939b4-26d1-4bc8-879f-8fef01528627" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        window.mutationCounter++\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="03dc8808-29c1-4761-a838-4ad694fd47cc" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="068cbf49-03d3-4887-877a-419274442f49" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="1456a682-0e8c-4cad-b9b6-4e908d87dc3a" data-uncovered-attr="fuzz" load="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" load="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="8f4cd447-357b-4b41-a152-d56679eac473" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ab3939b4-26d1-4bc8-879f-8fef01528627" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="03dc8808-29c1-4761-a838-4ad694fd47cc" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="1456a682-0e8c-4cad-b9b6-4e908d87dc3a" data-uncovered-attr="fuzz" load="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" load="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="8f4cd447-357b-4b41-a152-d56679eac473" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c422a4f7-6c9e-41f2-8a3e-3e295c55780b" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        new ArrayBuffer(1e6)\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="�463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggesFuzz()" onblur="triggerFuzz()" onerror="triwgerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="�463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggesFuzz()" onblur="triggerFuzz()" onerror="triwgerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="tviggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b0fe50c9-58a4-4df5-9fed-c727f810b43b" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz(9" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="843a3068-cd80-4c07-a218-de211a80ff7a" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-1\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggarFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="0845885b-fcdf-464c-acd2-39dc3d98fbb8" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        const res = document.querySelectorAll(\'*\');\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" load="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        document.querySelectorAll(\'*\')\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="|riggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triGgerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="647ae14a-56c1-4dcb-9ff7-70a6c6d7dea5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="priggerFuzz()" onerror="trigGerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="tryggerFuzz()" onblur="triggerFuzz()" onerror="trifgerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="bd7833cd-20ed-4af0-9bd2-be8948c335d9" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="647ae14a-56c1-4dcb-9ff7-70a6c6d7dea5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="priggerFuzz()" onerror="trigGerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="tryggerFuzz()" onblur="triggerFuzz()" onerror="trifgerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="bd7833cd-20ed-4af0-9bd2-be8948c335d9" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b4bae449-47b1-4a9d-bf31-4b89ec691bc8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ac8fd3f8-bc9b-452c-8abb-1debff8cecec" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ac8fd3f8-bc9b-452c-8abb-1debff8cecec" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz\x08)" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="5bd3461b-d3b4-4743-84b9-157e5ad2ed87" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="trigge�Fuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b4bae449-47b1-4a9d-bf31-4b89ec691bc8" data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3143adc5-cb76-4b55-ab60-38dfb2a6e247" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3143adc5-cb76-4b55-ab60-38dfb2a6e247" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="tpiggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        document.body.appendChild(document.createElement(\'div\'))\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="03dc8808-29c1-4761-a838-4ad694fd47cc" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="1456a682-0e8c-4cad-b9b6-4e908d87dc3a" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="8f4cd447-357b-4b41-a152-d56679eac473" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="409ccb47-d638-45c9-895a-ddb54d1450f8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="function handleEvent() {\n    try {\n        try {\n        const res = new ArrayBuffer(1e6);\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3daa2e60-86be-41fb-9f56-b47363c7bbe3" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="783d9b75-a674-4ce6-b9d5-b5b5be9bcbce" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="8c09f9fb-33df-4a14-86cd-d5b20db07a0f" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ff912169-5a2f-4a56-b9b4-2e735f39bd4f" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="vriggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ce9e6198-0c38-40b1-bb66-d88a524cf2f7" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" load="function handleEvent() {\n    try {\n        try {\n        document.body.appendChild(document.createElement(\'div\'))\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="03a2b255-daae-46d1-8709-5e7e420cdbdf" data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="4b1831a4-3217-4d7a-a6ba-c444e867d98a" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b4bae449-47b1-4a9d-bf31-4b89ec691bc8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        const res = document.body.appendChild(document.createElement(\'div\'));\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c422a4f7-6c9e-41f2-8a3e-3e295c55780b" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        document.querySelectorAll(\'*\')\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3143adc5-cb76-4b55-ab60-38dfb2a6e247" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz8)" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz((" onblur="triggerFuzz()" onerror="triggerVuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="function handleEvent() {\n    try {\n        try {\n        new ArrayBuffer(1e6)\n    } finally {\n        window.lastMutation = performance.now();\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script async="" data-uncovered-attr="fuzz" onerror="triggerFuzz()">\n            try {\n                window.triggerFuzz = () => {\n                    console.log(\'Safe triggerFuzz execution\');\n                    document.dispatchEvent(new Event(\'fuzz\'));\n                };\n            } catch(e) {\n                console.error(\'Fuzz setup failed:\', e);\n            }\n            </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 2\');" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ffa594d4-9e01-4c60-ab75-382cd5c89f75" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="f81e5626-c8bd-449b-a8b7-6c8ba143149c" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="03dc8808-29c1-4761-a838-4ad694fd47cc" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3e1e5b75-3cb4-4b5c-a71a-d46b475d229d" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" load="function handleEvent() {\n    try {\n        try {\n        const res = document.body.appendChild(document.createElement(\'div\'));\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="970f4023-4ead-43b2-ad21-f8ba66d38ee7" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="1456a682-0e8c-4caf-b9b6-4e908d87dc3a" data-uncovered-attr="fuzz" mouseover="function handleEvent() {\n    try {\n        try {\n        const res = window.mutationCounter++;\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onabort="vriggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="495a7617-7df2-4243-b71c-b491465eab28" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5f1c047-ba98-4686-8dfb-bbfebd45e840" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="03dc8808-29c1-4761-a838-4ad694fd47cc" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" load="function handleEvent() {\n    try {\n        try {\n        const res = document.body.appendChild(document.createElement(\'div\'));\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="cef5ad44-aefb-484d-a32c-6fb0e5756f8c" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="65783823-01d8-4c31-8eb5-cd17360b4c45" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3143adc5-cb76-4b55-ab60-38dfb2a6e247" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz(k" onblur="tryggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9f3f29fc-a295-4082-b89d-e41516c550d1" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9f3f29fc-a295-4082-b89d-e41516c550d1" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="45276bd7-4f50-473a-9a41-729e8206ae9d" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5de4c88-fd39-41ae-98dc-67ed83d6ce2f" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">\n                let potentiallyDanglingRef = document.getElementById(\'elem_to_remove\');\n        console.log(\'got initial reference:\', potentiallyDanglingRef);\n\n                        function removeElement() {\n            try {\n                let target = document.getElementById(\'elem_to_remove\');\n                if (target && target.parentNode) {\n                    console.log(\'removing element now...\');\n                    target.parentNode.removeChild(target);\n                                    } else {\n                    console.log(\'element already gone or no parent?\');\n                }\n            } catch (e) { console.error(\'error removing:\', e); }\n        }\n        setTimeout(removeElement, 50); \n                function useReferenceLater() {\n            try {\n                console.log(\'trying to use reference after delay...\');\n                                                let currentText = potentiallyDanglingRef.textContent;\n                potentiallyDanglingRef.innerHTML = \'accessed after free? \' + Math.random();\n                potentiallyDanglingRef.setAttribute(\'data-mutated-later\', \'true\');\n                console.log(\'successfully(?) used dangling ref. content:\', currentText);\n            } catch (e) {\n                                console.error(\'error using reference (might be expected if no crash):\', e);\n            }\n        }\n                        setTimeout(useReferenceLater, 200);         document.getElementById(\'actionBtn\').onclick = useReferenceLater;\n\n                let noisyDiv = document.createElement(\'d\' + String.fromCharCode(1) + \'v\');         noisyDiv.textContent = \'mutation noise \' + Date.now();\n        document.body.appendChild(noisyDiv);\n        document.body.setAttribute(\'data-bitwise-corrupt\', \'val\' + String.fromCharCode(10) + \'ue\');\n\n    </script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="1d2a565e-e472-488e-906c-6e91a030512b" data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="35febd88-c261-4d4a-9a35-2a78a67c6108" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="35febd88-c261-4d4a-9a35-2a78a67c6108" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz(�">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="vriggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="8f4cd447-357b-4b41-a152-d56679eac473" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c422a4f7-6c9e-41f2-8a3e-3e295c55780b" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="ac8fd3f8-bc9b-452c-8abb-qdebff8cecec" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFu{z()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8\x1303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuZz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="7021caf4-fbe4-478b-a8db-b60ea0983eae" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="03dc8808-29c1-4761-a838-4ad694fd47cc" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="eab182e4-8ba0-48c4-a91d-a347b6075f68" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b4bae449-47b1-4a9d-bf31-4b89ec691bc8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="1f3386fc-4b74-4169-b07a-7438f60654ce" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="c5bfd272-5bc0-4da5-8af1-686e939b52c5" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9a077fc6-ca48-460a-b725-a867ba8d5fca" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="5ba83fe4-b4c1-4e8a-b2b4-779�34267541" data-uncovered-attr="fuzz" onblur="triggerFuzZ()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3143adc5-cb76-4b55-ab60-38dfb2a6e247" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3143adc5-cb76-4b55-ab60-38dfb2a6e247" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="3463ed47-adef-4d97-8303-7535d46515b8" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="1456a682-0e8c-4cad-b9b6-4e908d87dc3a" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="2141020f-49bf-4ce7-9328-eae51c8e688f" data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFezz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="68d31307-e044-4bf6-a08e-864d97333c2e" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="2aa73baf-c900-4f63-8615-9bac5fac6f3c" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="b71e3f3e-de50-4195-97c4-ead00d8b7b03" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'Mutation: \');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="612e9085-b240-4864-94b7-77381901b5af" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="e83643fa-a827-4025-b437-2db938edcff9" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" mouseover="alert(\'Interactive mutation at step 2\');" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="26a47410-744b-4453-b316-c28e78b1990b" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="alert(\'Interactive mutation at step 1\');" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="a5665838-40c7-4bdb-9255-56740633d565" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-entangled="9686055d-17b2-4469-9591-2ac0e7b56cd2" data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script click="function handleEvent() {\n    try {\n        try {\n        const res = new ArrayBuffer(1e6);\n        console.debug(\'Mutation success:\', res);\n    } catch(e) {\n        console.warn(\'Mutation error:\', e);\n        document.dispatchEvent(new CustomEvent(\'mutationFailed\'));\n    }\n    } catch(e) {\n        document.body.classList.add(\'mutation-error\');\n    }\n}" data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 1\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': "<script>console.log('recursive script at step 0');</script>"}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onerror="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()">try { document.currentScript.parentNode.setAttribute(\'data-adv-entangle-2\', performance.now().toString()); } catch(e) {}</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onblur="triggerFuzz()" onerror="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'pattern': '<script[^>]*>[^<]*</script>', 'match': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()">console.log(\'recursive script at step 0\');</script>'}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'eval\\(', 'match': 'eval('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'fromCharCode\\(', 'match': 'fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'String\\.fromCharCode\\(', 'match': 'String.fromCharCode('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}, {'element_info': {'tag': 'script', 'outerHTML': '<script data-uncovered-attr="fuzz" onabort="triggerFuzz()" onblur="triggerFuzz()" onerror="triggerFuzz()">\n        let counter = 0;\n        function recursiveDomFiller() {\n                        \n            counter++;\n            let output = document.getElementById(\'outputArea\');\n            if (output) {\n                                let newItem = document.createElement(\'span\');\n                newItem.textContent = \' item \' + counter + \' (\' + Math.random() + \') \';\n                                for (let i=0; i<5; i++) {                     output.appendChild(newItem.cloneNode(true));\n                }\n                                output.scrollTop = output.scrollHeight;\n            }\n\n            if (counter % 100 === 0) {\n                 console.log(\'hang check counter:\', counter);\n            }\n\n                                                setTimeout(recursiveDomFiller, 0);\n        }\n\n        console.log(\'starting recursive dom filler...\');\n        recursiveDomFiller(); \n                try { eval(\'console.log("mutated eval \' + Math.random() + \'")\'); } catch(e){}\n        document.body.style.backgroundColor = \'light\' + String.fromCharCode(20) + \'blue\';\n\n    <coverage-gap-fill data-depth="5"><script>console.log(\'recursive script at step 0\');</script>'}, 'pattern': 'setTimeout\\(', 'match': 'setTimeout('}]
[16:10:06][INFO] detection-advanced: Finished => mutated_0003.html, took 798.56s
[16:10:06][INFO] detection-advanced: [DETECTION] Start => mutated_0004.html
[16:10:25][INFO] detection-advanced: Testing file: file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0004.html
[16:20:23][ERROR] detection-advanced: Test /home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0004.html exceeded maximum execution time of 600 seconds.
[16:20:25][WARNING] detection-advanced: Timeout loading file:///home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/mutations/mutated_0004.html
[16:20:26][WARNING] urllib3.connectionpool: Connection pool is full, discarding connection: localhost
[16:21:37][WARNING] detection-advanced:  => anomaly => max_execution_timeout => Test exceeded 600 seconds
[16:21:37][WARNING] detection-advanced:  => anomaly => timeout_error => Timeout loading URL
[16:21:37][INFO] detection-advanced: Finished => mutated_0004.html, took 690.62s
[16:21:37][DEBUG] detection-advanced: [write_coverage_summary] self.coverage_map keys: dict_keys(['mutated_0001.html', 'mutated_0002.html', 'mutated_0003.html'])
[16:21:37][DEBUG] detection-advanced: [write_coverage_summary] Processing file: mutated_0001.html, Coverage Data: [{'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '667', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '668', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '669', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '670', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13937, 'startOffset': 0}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13936, 'startOffset': 1}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 12985, 'startOffset': 21}]}, {'functionName': 'newError', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 1616, 'startOffset': 1507}]}, {'functionName': 'isNodeReachable', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 1881, 'startOffset': 1618}]}, {'functionName': 'getNodeRoot', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 2250, 'startOffset': 2137}]}, {'functionName': 'getNodeRootThroughAnyShadows', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 2548, 'startOffset': 2354}]}, {'functionName': 'isElement', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 3660, 'startOffset': 2716}]}, {'functionName': 'isCollection', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 4114, 'startOffset': 3876}]}, {'functionName': 'cloneWithAlgorithm', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 5281, 'startOffset': 4622}]}, {'functionName': 'maybeCopyProperty', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 4949, 'startOffset': 4697}]}, {'functionName': 'cloneWithCircularCheck', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 5981, 'startOffset': 5710}]}, {'functionName': 'serializationGuard', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 6684, 'startOffset': 6037}]}, {'functionName': 'preprocessResult', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 8931, 'startOffset': 7053}]}, {'functionName': 'resolveReferencesRecursive', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 10157, 'startOffset': 9315}]}, {'functionName': 'resolveReferences', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 10953, 'startOffset': 10467}]}, {'functionName': 'callFunction', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 12938, 'startOffset': 11809}]}, {'functionName': 'buildError', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 12232, 'startOffset': 11935}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 12845, 'startOffset': 12567}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13888, 'startOffset': 13001}]}, {'functionName': 'executeScript', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13840, 'startOffset': 13477}]}], 'scriptId': '671', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 69, 'startOffset': 0}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 68, 'startOffset': 1}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 66, 'startOffset': 32}]}], 'scriptId': '672', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '673', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '674', 'url': ''}]
[16:21:37][DEBUG] detection-advanced: [write_coverage_summary] Processing file: mutated_0002.html, Coverage Data: [{'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '2872', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '2873', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '2874', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '2875', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13937, 'startOffset': 0}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13936, 'startOffset': 1}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 12985, 'startOffset': 21}]}, {'functionName': 'newError', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 1616, 'startOffset': 1507}]}, {'functionName': 'isNodeReachable', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 1881, 'startOffset': 1618}]}, {'functionName': 'getNodeRoot', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 2250, 'startOffset': 2137}]}, {'functionName': 'getNodeRootThroughAnyShadows', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 2548, 'startOffset': 2354}]}, {'functionName': 'isElement', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 3660, 'startOffset': 2716}]}, {'functionName': 'isCollection', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 4114, 'startOffset': 3876}]}, {'functionName': 'cloneWithAlgorithm', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 5281, 'startOffset': 4622}]}, {'functionName': 'maybeCopyProperty', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 4949, 'startOffset': 4697}]}, {'functionName': 'cloneWithCircularCheck', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 5981, 'startOffset': 5710}]}, {'functionName': 'serializationGuard', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 6684, 'startOffset': 6037}]}, {'functionName': 'preprocessResult', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 8931, 'startOffset': 7053}]}, {'functionName': 'resolveReferencesRecursive', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 10157, 'startOffset': 9315}]}, {'functionName': 'resolveReferences', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 10953, 'startOffset': 10467}]}, {'functionName': 'callFunction', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 12938, 'startOffset': 11809}]}, {'functionName': 'buildError', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 12232, 'startOffset': 11935}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 12845, 'startOffset': 12567}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13888, 'startOffset': 13001}]}, {'functionName': 'executeScript', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13840, 'startOffset': 13477}]}], 'scriptId': '2876', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 69, 'startOffset': 0}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 68, 'startOffset': 1}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 66, 'startOffset': 32}]}], 'scriptId': '2877', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '2878', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '2879', 'url': ''}]
[16:21:37][DEBUG] detection-advanced: [write_coverage_summary] Processing file: mutated_0003.html, Coverage Data: [{'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '20270', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '20271', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '20272', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '20273', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13937, 'startOffset': 0}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13936, 'startOffset': 1}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 12985, 'startOffset': 21}]}, {'functionName': 'newError', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 1616, 'startOffset': 1507}]}, {'functionName': 'isNodeReachable', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 1881, 'startOffset': 1618}]}, {'functionName': 'getNodeRoot', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 2250, 'startOffset': 2137}]}, {'functionName': 'getNodeRootThroughAnyShadows', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 2548, 'startOffset': 2354}]}, {'functionName': 'isElement', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 3660, 'startOffset': 2716}]}, {'functionName': 'isCollection', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 4114, 'startOffset': 3876}]}, {'functionName': 'cloneWithAlgorithm', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 5281, 'startOffset': 4622}]}, {'functionName': 'maybeCopyProperty', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 4949, 'startOffset': 4697}]}, {'functionName': 'cloneWithCircularCheck', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 5981, 'startOffset': 5710}]}, {'functionName': 'serializationGuard', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 6684, 'startOffset': 6037}]}, {'functionName': 'preprocessResult', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 8931, 'startOffset': 7053}]}, {'functionName': 'resolveReferencesRecursive', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 10157, 'startOffset': 9315}]}, {'functionName': 'resolveReferences', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 10953, 'startOffset': 10467}]}, {'functionName': 'callFunction', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 12938, 'startOffset': 11809}]}, {'functionName': 'buildError', 'isBlockCoverage': False, 'ranges': [{'count': 0, 'endOffset': 12232, 'startOffset': 11935}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 12845, 'startOffset': 12567}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13888, 'startOffset': 13001}]}, {'functionName': 'executeScript', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 13840, 'startOffset': 13477}]}], 'scriptId': '20274', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 69, 'startOffset': 0}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 68, 'startOffset': 1}]}, {'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 66, 'startOffset': 32}]}], 'scriptId': '20275', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '20276', 'url': ''}, {'functions': [{'functionName': '', 'isBlockCoverage': False, 'ranges': [{'count': 1, 'endOffset': 1, 'startOffset': 0}]}], 'scriptId': '20277', 'url': ''}]
[16:21:37][INFO] detection-advanced: [COVERAGE] coverage_summary => /home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/crash_results/coverage_summary.json
[16:21:37][INFO] detection-advanced: [REPORT] Text report generated: /home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/crash_results/reports/full_report.txt
[16:21:38][INFO] detection-advanced: [REPORT] JSON report generated: /home/dhia/browser-fuzzer/Dissertation/logger/run_20250406_154811/round_001/crash_results/reports/detailed_report.json

+-----------------+---------+
| Metric          |   Value |
|-----------------+---------|
| Total Tests     |       4 |
| Passed          |       0 |
| Failed          |       4 |
| Critical Issues |       0 |
| High Severity   |       0 |
| Medium Severity |       0 |
| Low Severity    |       0 |
| Info            |       4 |
+-----------------+---------+
[16:21:38][INFO] detection-advanced: Cleaning up 0 temporary files
[16:21:38][INFO] detection-advanced: System cleanup completed
