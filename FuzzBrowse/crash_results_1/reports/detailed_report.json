{
  "metadata": {
    "system": {
      "system": "Linux",
      "node": "dissertation",
      "release": "6.8.0-1025-gcp",
      "version": "#27~22.04.1-Ubuntu SMP Mon Feb 24 16:42:24 UTC 2025",
      "machine": "x86_64",
      "processor": "x86_64"
    },
    "execution_time": "2025-03-28T04:31:33.107403",
    "chrome_version": "Chromium 135.0.7019.0"
  },
  "tests": {
    "page1.html": {
      "file": "page1.html",
      "start_time": "2025-03-28 04:21:43.957706",
      "artifacts": {},
      "metrics": {
        "load_time": 483,
        "cpu_usage": 31.1,
        "memory_usage": 0.0,
        "disk_read": 0.0,
        "disk_write": 2.23046875,
        "js_heap": 2514732,
        "performance_data_cdp": [
          {
            "name": "Timestamp",
            "value": 1071.874671
          },
          {
            "name": "AudioHandlers",
            "value": 0
          },
          {
            "name": "AudioWorkletProcessors",
            "value": 0
          },
          {
            "name": "Documents",
            "value": 1
          },
          {
            "name": "Frames",
            "value": 1
          },
          {
            "name": "JSEventListeners",
            "value": 3
          },
          {
            "name": "LayoutObjects",
            "value": 5227
          },
          {
            "name": "MediaKeySessions",
            "value": 0
          },
          {
            "name": "MediaKeys",
            "value": 0
          },
          {
            "name": "Nodes",
            "value": 4410
          },
          {
            "name": "Resources",
            "value": 0
          },
          {
            "name": "ContextLifecycleStateObservers",
            "value": 3
          },
          {
            "name": "V8PerContextDatas",
            "value": 1
          },
          {
            "name": "WorkerGlobalScopes",
            "value": 0
          },
          {
            "name": "UACSSResources",
            "value": 0
          },
          {
            "name": "RTCPeerConnections",
            "value": 0
          },
          {
            "name": "ResourceFetchers",
            "value": 1
          },
          {
            "name": "AdSubframes",
            "value": 0
          },
          {
            "name": "DetachedScriptStates",
            "value": 0
          },
          {
            "name": "ArrayBufferContents",
            "value": 13
          },
          {
            "name": "LayoutCount",
            "value": 1532
          },
          {
            "name": "RecalcStyleCount",
            "value": 1536
          },
          {
            "name": "LayoutDuration",
            "value": 335.147377
          },
          {
            "name": "RecalcStyleDuration",
            "value": 9.782042
          },
          {
            "name": "DevToolsCommandDuration",
            "value": 1.845869
          },
          {
            "name": "ScriptDuration",
            "value": 22.526105
          },
          {
            "name": "V8CompileDuration",
            "value": 0.002694
          },
          {
            "name": "TaskDuration",
            "value": 412.222237
          },
          {
            "name": "TaskOtherDuration",
            "value": 42.91815
          },
          {
            "name": "ThreadTime",
            "value": 411.152403
          },
          {
            "name": "ProcessTime",
            "value": 451.99
          },
          {
            "name": "JSHeapUsedSize",
            "value": 2499812
          },
          {
            "name": "JSHeapTotalSize",
            "value": 6852608
          },
          {
            "name": "FirstMeaningfulPaint",
            "value": 659.492825
          },
          {
            "name": "DomContentLoaded",
            "value": 658.598804
          },
          {
            "name": "NavigationStart",
            "value": 658.197851
          }
        ],
        "coverage_data": [
          {
            "functions": [
              {
                "functionName": "log",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 249,
                    "startOffset": 68
                  }
                ]
              },
              {
                "functionName": "stressDOM",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 2200,
                    "startOffset": 473
                  }
                ]
              },
              {
                "functionName": "stressCanvas",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 4707,
                    "startOffset": 2257
                  }
                ]
              },
              {
                "functionName": "stressMemory",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 6267,
                    "startOffset": 4880
                  }
                ]
              },
              {
                "functionName": "runStressCycle",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 6868,
                    "startOffset": 6306
                  }
                ]
              }
            ],
            "scriptId": "6",
            "url": "file:///tmp/single_test_page1/page1.html"
          },
          {
            "functions": [
              {
                "functionName": "PerformanceObserver.observe.type",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 463,
                    "startOffset": 155
                  }
                ]
              },
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 437,
                    "startOffset": 215
                  }
                ]
              }
            ],
            "scriptId": "144",
            "url": ""
          },
          {
            "functions": [
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 1,
                    "startOffset": 0
                  }
                ]
              }
            ],
            "scriptId": "177",
            "url": ""
          },
          {
            "functions": [
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 1,
                    "startOffset": 0
                  }
                ]
              }
            ],
            "scriptId": "178",
            "url": ""
          },
          {
            "functions": [
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 1,
                    "startOffset": 0
                  }
                ]
              }
            ],
            "scriptId": "179",
            "url": ""
          },
          {
            "functions": [
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 1,
                    "startOffset": 0
                  }
                ]
              }
            ],
            "scriptId": "180",
            "url": ""
          },
          {
            "functions": [
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 13937,
                    "startOffset": 0
                  }
                ]
              },
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 13936,
                    "startOffset": 1
                  }
                ]
              },
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 12985,
                    "startOffset": 21
                  }
                ]
              },
              {
                "functionName": "newError",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 0,
                    "endOffset": 1616,
                    "startOffset": 1507
                  }
                ]
              },
              {
                "functionName": "isNodeReachable",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 0,
                    "endOffset": 1881,
                    "startOffset": 1618
                  }
                ]
              },
              {
                "functionName": "getNodeRoot",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 0,
                    "endOffset": 2250,
                    "startOffset": 2137
                  }
                ]
              },
              {
                "functionName": "getNodeRootThroughAnyShadows",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 0,
                    "endOffset": 2548,
                    "startOffset": 2354
                  }
                ]
              },
              {
                "functionName": "isElement",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 0,
                    "endOffset": 3660,
                    "startOffset": 2716
                  }
                ]
              },
              {
                "functionName": "isCollection",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 4114,
                    "startOffset": 3876
                  }
                ]
              },
              {
                "functionName": "cloneWithAlgorithm",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 5281,
                    "startOffset": 4622
                  }
                ]
              },
              {
                "functionName": "maybeCopyProperty",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 4949,
                    "startOffset": 4697
                  }
                ]
              },
              {
                "functionName": "cloneWithCircularCheck",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 0,
                    "endOffset": 5981,
                    "startOffset": 5710
                  }
                ]
              },
              {
                "functionName": "serializationGuard",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 0,
                    "endOffset": 6684,
                    "startOffset": 6037
                  }
                ]
              },
              {
                "functionName": "preprocessResult",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 8931,
                    "startOffset": 7053
                  }
                ]
              },
              {
                "functionName": "resolveReferencesRecursive",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 10157,
                    "startOffset": 9315
                  }
                ]
              },
              {
                "functionName": "resolveReferences",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 10953,
                    "startOffset": 10467
                  }
                ]
              },
              {
                "functionName": "callFunction",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 12938,
                    "startOffset": 11809
                  }
                ]
              },
              {
                "functionName": "buildError",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 0,
                    "endOffset": 12232,
                    "startOffset": 11935
                  }
                ]
              },
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 12845,
                    "startOffset": 12567
                  }
                ]
              },
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 13888,
                    "startOffset": 13001
                  }
                ]
              },
              {
                "functionName": "executeScript",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 13840,
                    "startOffset": 13477
                  }
                ]
              }
            ],
            "scriptId": "181",
            "url": ""
          },
          {
            "functions": [
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 69,
                    "startOffset": 0
                  }
                ]
              },
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 68,
                    "startOffset": 1
                  }
                ]
              },
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 66,
                    "startOffset": 32
                  }
                ]
              }
            ],
            "scriptId": "182",
            "url": ""
          },
          {
            "functions": [
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 1,
                    "startOffset": 0
                  }
                ]
              }
            ],
            "scriptId": "183",
            "url": ""
          },
          {
            "functions": [
              {
                "functionName": "",
                "isBlockCoverage": false,
                "ranges": [
                  {
                    "count": 1,
                    "endOffset": 1,
                    "startOffset": 0
                  }
                ]
              }
            ],
            "scriptId": "184",
            "url": ""
          }
        ],
        "duration": 589.127333
      },
      "anomalies": [
        {
          "type": "missing_or_invalid_security_headers",
          "category": "security",
          "timestamp": "2025-03-28T04:22:11.091296",
          "details": {
            "x-content-type-options": "Missing",
            "x-frame-options": "Missing",
            "strict-transport-security": "Missing",
            "content-security-policy": "Missing",
            "x-xss-protection": "Missing"
          },
          "severity": 1,
          "detected_by": "check_security_issues",
          "artifacts": {}
        },
        {
          "type": "storage_error",
          "category": "storage",
          "timestamp": "2025-03-28T04:22:55.168092",
          "details": "Message: invalid cookie domain\n  (Session info: chrome=135.0.7019.0)\nStacktrace:\n#0 0x5d884371e0b6 <unknown>\n#1 0x5d88469a6ce8 <unknown>\n#2 0x5d884696b7c9 <unknown>\n#3 0x5d884382ae80 <unknown>\n#4 0x5d88439a1b90 <unknown>\n#5 0x5d8843931a25 <unknown>\n#6 0x5d884398658e <unknown>\n#7 0x5d88439855d9 <unknown>\n#8 0x5d8843934b62 <unknown>\n#9 0x5d88438cefc9 <unknown>\n#10 0x5d88438cbb21 <unknown>\n#11 0x5d88438ce66d <unknown>\n#12 0x5d88437ead67 <unknown>\n#13 0x5d884679fbac <unknown>\n#14 0x5d8846861dd2 <unknown>\n#15 0x5d88468601bc <unknown>\n#16 0x5d88468630eb <unknown>\n#17 0x5d88467e1459 <unknown>\n#18 0x5d88468643f0 <unknown>\n#19 0x5d8846760a31 <unknown>\n#20 0x5d884691395c <unknown>\n#21 0x5d88469141e0 <unknown>\n#22 0x5d8846959ada <unknown>\n#23 0x5d8843774b87 <unknown>\n#24 0x779124e94ac3 <unknown>\n#25 0x779124f26850 <unknown>\n",
          "severity": 1,
          "detected_by": "check_storage",
          "artifacts": {}
        },
        {
          "type": "mouseover_event_failed",
          "category": "event_handling",
          "timestamp": "2025-03-28T04:24:58.012435",
          "details": "Mouseover event handler not executed on element",
          "severity": 1,
          "detected_by": "check_event_handling",
          "artifacts": {}
        },
        {
          "type": "missing_lang_attribute",
          "category": "localization",
          "timestamp": "2025-03-28T04:25:32.764427",
          "details": "The 'lang' attribute is missing from the <html> tag.",
          "severity": 1,
          "detected_by": "check_localization",
          "artifacts": {}
        },
        {
          "type": "high_fid",
          "category": "performance",
          "timestamp": "2025-03-28T04:27:00.952528",
          "details": "First Input Delay (FID) is high: 1392.6999999999534 ms",
          "severity": 1,
          "detected_by": "check_performance",
          "artifacts": {}
        },
        {
          "type": "potential_xss_in_html",
          "category": "security",
          "timestamp": "2025-03-28T04:28:14.683272",
          "details": [
            {
              "element_info": {
                "tag": "script",
                "outerHTML": "<script>\n        const logElement = document.getElementById('log');\n        function log(message) {\n            console.log(message);\n            logElement.textContent += message + '\\n';\n            logElement.scrollTop = logElement.scrollHeight;\n        }\n\n        let stopStress = false;\n        let cycleCount = 0;\n        const MAX_CYCLES = 500; // Limit runtime to avoid infinite loops in case of non-crash hangs\n\n        // --- Vector 1: DOM Manipulation Stress ---\n        function stressDOM() {\n            if (stopStress) return;\n            log(`DOM Stress Cycle ${cycleCount}`);\n            const container = document.getElementById('domContainer');\n            if (!container) {\n                log(\"Error: DOM container not found.\");\n                stopStress = true;\n                return;\n            }\n\n            try {\n                // Create and append elements rapidly\n                for (let i = 0; i < 100; i++) {\n                    const elType = Math.random() < 0.5 ? 'div' : 'span';\n                    const el = document.createElement(elType);\n                    el.textContent = `Node ${cycleCount}-${i} (${Math.random().toString(36).substring(2)})`;\n                    // Occasionally add attributes or styles\n                    if (Math.random() < 0.1) {\n                        el.setAttribute('data-random', Math.random());\n                        el.style.color = Math.random() < 0.5 ? 'red' : 'blue';\n                    }\n                    container.appendChild(el);\n                }\n\n                // Remove elements rapidly from the beginning\n                while (container.children.length > 200) { // Keep a moderate number\n                    container.removeChild(container.firstElementChild);\n                }\n\n                // Occasionally trigger layout/reflow\n                if (cycleCount % 10 === 0) {\n                    log(\"Triggering layout read...\");\n                    container.getBoundingClientRect();\n                }\n\n            } catch (e) {\n                log(`DOM Stress Error: ${e.message}`);\n                // Don't necessarily stop, maybe the error itself is interesting or recovery reveals a bug\n            }\n        }\n\n        // --- Vector 2: Canvas API Stress ---\n        function stressCanvas() {\n            if (stopStress) return;\n            log(`Canvas Stress Cycle ${cycleCount}`);\n            const canvas = document.getElementById('stressCanvas');\n            if (!canvas || !canvas.getContext) {\n                 log(\"Error: Canvas not found or context unavailable.\");\n                 stopStress = true;\n                 return;\n            }\n            const ctx = canvas.getContext('2d');\n            const w = canvas.width;\n            const h = canvas.height;\n\n            try {\n                 // Many complex draw calls\n                for (let i = 0; i < 50; i++) {\n                    ctx.save();\n                    ctx.globalAlpha = Math.random() * 0.5 + 0.2;\n                    ctx.fillStyle = `hsl(${Math.random()*360}, 80%, 50%)`;\n                    ctx.translate(Math.random() * w, Math.random() * h);\n                    ctx.rotate(Math.random() * Math.PI * 2);\n\n                    // Draw varied shapes\n                    if (Math.random() < 0.3) {\n                        ctx.fillRect(-20, -20, 40, 40);\n                    } else if (Math.random() < 0.6) {\n                        ctx.beginPath();\n                        ctx.arc(0, 0, Math.random() * 20 + 5, 0, Math.PI * 2);\n                        ctx.fill();\n                    } else {\n                         ctx.beginPath();\n                         ctx.moveTo(0, 0);\n                         ctx.bezierCurveTo(Math.random()*40-20, Math.random()*40-20, Math.random()*40-20, Math.random()*40-20, Math.random()*40-20, Math.random()*40-20);\n                         ctx.lineTo(Math.random()*40-20, Math.random()*40-20);\n                         ctx.closePath();\n                         ctx.fill();\n                         ctx.stroke();\n                    }\n                    ctx.restore();\n                }\n\n                // Occasionally read back data (can be slow/stressful)\n                 if (cycleCount % 20 === 0) {\n                     log(\"Reading canvas pixels...\");\n                     let imageData = ctx.getImageData(0, 0, 10, 10); // Small read\n                 }\n\n                 // Occasionally clear/resize (might trigger cleanup bugs)\n                 if (cycleCount % 50 === 3) {\n                     log(\"Clearing canvas...\");\n                     ctx.clearRect(0, 0, w, h);\n                 }\n\n            } catch (e) {\n                log(`Canvas Stress Error: ${e.message}`);\n            }\n        }\n\n        // --- Vector 3: Memory Allocation Stress ---\n        // Keep track of allocated buffers to potentially free them later\n        let allocatedBuffers = [];\n        function stressMemory() {\n             if (stopStress) return;\n             log(`Memory Stress Cycle ${cycleCount}`);\n\n            try {\n                 // Allocate moderately large buffers repeatedly\n                 const allocSizeMB = 30;\n                 const allocSizeBytes = allocSizeMB * 1024 * 1024;\n                 log(`Allocating ${allocSizeMB}MB ArrayBuffer...`);\n                 let buffer = new ArrayBuffer(allocSizeBytes);\n                 allocatedBuffers.push(buffer); // Keep a reference\n\n                 // Touch memory briefly\n                 let view = new DataView(buffer);\n                 view.setInt32(0, cycleCount);\n\n                 // Remove old buffers to allow GC and potentially trigger UAF\n                 if (allocatedBuffers.length > 5) {\n                     log(\"Removing oldest buffer reference...\");\n                     allocatedBuffers.shift(); // Remove first element\n                 }\n                 log(`Allocated ${allocSizeMB}MB. Total held buffers: ${allocatedBuffers.length}`);\n\n            } catch (e) {\n                 log(`Memory Allocation Error: ${e.message}`);\n                 // Clear array on major allocation failure to avoid holding partial/bad state\n                 allocatedBuffers = [];\n                 // Maybe stop if allocation fails consistently?\n                 // stopStress = true;\n            }\n        }\n\n        // --- Main Loop ---\n        function runStressCycle() {\n            if (stopStress || cycleCount >= MAX_CYCLES) {\n                 log(`Stress testing stopped. Reached cycle ${cycleCount}.`);\n                 return;\n            }\n            cycleCount++;\n\n            // Run the different stress vectors\n            stressDOM();\n            stressCanvas();\n            stressMemory(); // Run this last as it might be most likely to OOM\n\n            // Schedule next cycle\n            requestAnimationFrame(runStressCycle); // Use rAF for continuous stress tied to rendering loop\n        }\n\n        // --- Start ---\n        window.onload = () => {\n            log(\"Starting ASan stress test...\");\n            // Add a small delay before starting intense loops\n            setTimeout(() => {\n                 requestAnimationFrame(runStressCycle);\n            }, 500);\n        };\n\n        // Optional: Stop mechanism if needed (e.g., via console)\n        window.stopTest = () => {\n            stopStress = true;\n            log(\"Manual stop requested.\");\n        };\n\n    </script>"
              },
              "pattern": "setTimeout\\(",
              "match": "setTimeout("
            }
          ],
          "severity": 1,
          "detected_by": "check_xss_patterns",
          "artifacts": {}
        }
      ],
      "status": "failed",
      "root_cause": "N/A"
    }
  }
}