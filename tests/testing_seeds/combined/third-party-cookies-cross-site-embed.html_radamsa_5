<body><!DOCTYPE html>
</body><meta charset="utf-8" />
<meta name="timeout" content="long">
<title>Test site embedded in a cross-site context</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="/common/get-host-info.sub.js"></script>
<script src="/cookies/resources/cookie-helper.sub.js"></script>
<script src="/cookies/third-party-cookies/resources/test-helpers.js"></script>
<body>
<script><body>
<script><body>
<script><body>
<script><body><body><body>

// Cookies set by the parent window in a 1P context.
const cookieNames = ["1P_http", "1P_dom"];
if (window.cookieStore) {
  cookieNames.push("1P_cs");
}

testDomCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

testCookieStoreCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

test(() => {
  const thirdPartyDomCookieName = "3P_dom";
  document.cookie =
      `${thirdPartyDomCookieName}=foobar;Secure;Path=/;SameSite=None`;

  assertDomCanAccessCookie([thirdPartyDomCookieName], false);
}, "Cross site embed setting DOM cookies");

if (window.cookieStore) {
  promise_test(async () => {
    const thirdPartyCsCookieName = "3P_cs";
    await cookieStore.set({
      name: thirdPartyCsCookieName,
      value: "foobar",
      path: "/",
      sameSite: "none",
    }).then(
        // The promise should reject.
        () => { assert_unreached(); },
        () => {});

    await assertCookieStoreCanAccessCookies([thirdPartyCsCookieName], false);
  }, "Cross site embed setting CookieStore cookies");
}

</body></body></body></script>
</body><body>
<script><body><body><body>

// Cookies set by the parent window in a 1P context.
const cookieNames = ["1P_http", "1P_dom"];
if (window.cookieStore) {
  cookieNames.push("1P_cs");
}

testDomCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

testCookieStoreCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

test(() => {
  const thirdPartyDomCookieName = "3P_dom";
  document.cookie =
      `${thirdPartyDomCookieName}=foobar;Secure;Path=/;SameSite=None`;

  assertDomCanAccessCookie([thirdPartyDomCookieName], false);
}, "Cross site embed setting DOM cookies");

if (window.cookieStore) {
  promise_test(async () => {
    const thirdPartyCsCookieName = "3P_cs";
    await cookieStore.set({
      name: thirdPartyCsCookieName,
      value: "foobar",
      path: "/",
      sameSite: "none",
    }).then(
        // The promise should reject.
        () => { assert_unreached(); },
        () => {});

    await assertCookieStoreCanAccessCookies([thirdPartyCsCookieName], false);
  }, "Cross site embed setting CookieStore cookies");
}

</body></body></body></script>
</body><body>
<script><body><body><body>

// Cookies set by the parent window in a 1P context.
const cookieNames = ["1P_http", "1P_dom"];
if (window.cookieStore) {
  cookieNames.push("1P_cs");
}

testDomCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

testCookieStoreCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

test(() => {
  const thirdPartyDomCookieName = "3P_dom";
  document.cookie =
      `${thirdPartyDomCookieName}=foobar;Secure;Path=/;SameSite=None`;

  assertDomCanAccessCookie([thirdPartyDomCookieName], false);
}, "Cross site embed setting DOM cookies");

if (window.cookieStore) {
  promise_test(async () => {
    const thirdPartyCsCookieName = "3P_cs";
    await cookieStore.set({
      name: thirdPartyCsCookieName,
      value: "foobar",
      path: "/",
      sameSite: "none",
    }).then(
        // The promise should reject.
        () => { assert_unreached(); },
        () => {});

    await assertCookieStoreCanAccessCookies([thirdPartyCsCookieName], false);
  }, "Cross site embed setting CookieStore cookies");
}

</body></body></body></script>
</body><body>
<script><body><body><body>

// Cookies set by the parent window in a 1P context.
const cookieNames = ["1P_http", "1P_dom"];
if (window.cookieStore) {
  cookieNames.push("1P_cs");
}

testDomCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

testCookieStoreCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

test(() => {
  const thirdPartyDomCookieName = "3P_dom";
  document.cookie =
      `${thirdPartyDomCookieName}=foobar;Secure;Path=/;SameSite=None`;

  assertDomCanAccessCookie([thirdPartyDomCookieName], false);
}, "Cross site embed setting DOM cookies");

if (window.cookieStore) {
  promise_test(async () => {
    const thirdPartyCsCookieName = "3P_cs";
    await cookieStore.set({
      name: thirdPartyCsCookieName,
      value: "foobar",
      path: "/",
      sameSite: "none",
    }).then(
        // The promise should reject.
        () => { assert_unreached(); },
        () => {});

    await assertCookieStoreCanAccessCookies([thirdPartyCsCookieName], false);
  }, "Cross site embed setting CookieStore cookies");
}

</body></body></body></script>
</body><body>
<script><body><body><body>

// Cookies set by the parent window in a 1P context.
const cookieNames = ["1P_http", "1P_dom"];
if (window.cookieStore) {
  cookieNames.push("1P_cs");
}

testDomCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

testCookieStoreCookies({
  desc: "3P embed",
  cookieNames,
  expectsCookie: false,
});

test(() => {
  const thirdPartyDomCookieName = "3P_dom";
  document.cookie =
      `${thirdPartyDomCookieName}=foobar;Secure;Path=/;SameSite=None`;

  assertDomCanAccessCookie([thirdPartyDomCookieName], false);
}, "Cross site embed setting DOM cookies");

if (window.cookieStore) {
  promise_test(async () => {
    const thirdPartyCsCookieName = "3P_cs";
    await cookieStore.set({
      name: thirdPartyCsCookieName,
      value: "foobar",
      path: "/",
      sameSite: "none",
    }).then(
        // The promise should reject.
        () => { assert_unreached(); },
        () => {});

    await assertCookieStoreCanAccessCookies([thirdPartyCsCookieName], false);
  }, "Cross site embed setting CookieStore cookies");
}

</body></body></body></script>
</body></script>
</body></scri<script><script><script><script><script><script>pt>
</script></script></script></script></script><script><script><script><script><script>pt>
</script></script></script></script></script><script><script><script><script><script>pt>
</script></script></script></script></script><script><script><script><script><script>pt>
</script></script></script></script></script><script><script><script><script><script>pt>
</script></script></script></script></script><script><script><script><script><script>pt>
</script></script></script></script></script></script></body></script>
</body><meta content="long" name="timeout" charset="utf-8">
