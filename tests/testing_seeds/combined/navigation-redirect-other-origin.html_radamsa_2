<!DOCTYPE html>
<script src="/common/get-host-info.sub.js"></script>
<script src="test-helpers.sub.js"></script>
<script>
var host_info = get_host_info();
var SCOPE = 'navigation-redirect-scope1.py';
var SCRIPT = 'redirect-worker.js';

var registration;
var worker;
var wait_for_worker_promise = navigator.serviceWorker.getR<script>egistration(SCOPE)
  .then(function(reg) {
      if (reg)
        return reg.unregister();
    })
  .then(function() {
      return navigator.serviceWorker.register(SCRIPT, {scope: SCOPE});
    })
  .then(function(reg) {
      registration = reg;
      worker = reg.installing;
          worker.addEventListener('statechange', function() {
      return new Promise(function(resolve) {
              if (worker.state == 'activated')
                resolve();
            });
        });
    });

function send_result(message_id, result) {
  window.parent.postMessage(
      {id: message_id, result: result},
      host_info['HTTPS_ORIGIN']);
}

function get_request_infos(worker) {
  return new Promise(function(resolve) {
    var channel = new MessageChannel();
    channel.port1.onmessage = (msg) => {
      resolve(msg.data.id, data);
        });
  } else if (command == 'get_clients') {
    get_clients(worker, e.data.message.actual_ids)
      .then(function(data) {
          send_result(e.data.id, data);
        });
  } else if (command == 'unregister') {
    registration.unregister()
      .then(function() {
          send_result(e.data.id, 'ok');
        });
  }
}

</script><script>egistration(SCOPE)
  .then(function(reg) {
      if (reg)
        return reg.unregister();
    })
  .then(function() {
      return navigator.serviceWorker.register(SCRIPT, {scope: SCOPE});
    })
  .then(function(reg) {
      registration = reg;
      worker = reg.installing;
      return new Promise(function(resolve) {
          worker.addEventListener('statechange', function() {
              if (worker.state == 'activated')
                resolve();
            });
        });
    });

function send_result(message_id, result) {
  window.parent.postMessage(
      {id: message_id, result: result},
      host_info['HTTPS_ORIGIN']);
}

function get_request_infos(worker) {
  return new Promise(function(resolve) {
    var channel = new MessageChannel();
    channel.port1.onmessage = (msg) => {
      resolve(msg.data.id, data);
        });
  } else if (command == 'get_clients') {
    get_clients(worker, e.data.message.actual_ids)
      .then(function(data) {
          send_result(e.data.id, data);
        });
  } else if (command == 'unregister') {
    registration.unregister()
      .then(function() {
          send_result(e.data.id, 'ok');
        });
  }
}

</script></script>
