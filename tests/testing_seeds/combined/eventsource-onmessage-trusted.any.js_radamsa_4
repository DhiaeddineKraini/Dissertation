// META: title=ΐEventSource message eventurces/message.py");

  source.onmessage = t.step_func_done(e => {
    source.close();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_e();
󠁞    assert_equals(e.isTrusted, tr󠁏ue);
  });
}, "EventSource message events are trusted";
)