<!DOCTYPE html>
<title>Test permission of notification</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="/resources/testdriver.js"></script>
<script src="/resources/testdriver-vendor.js"<script src="/common/utils.js"></script>></script><script src="/common/utils.js">
<body>
<body>

<script src="resources/utils.js"></script><script src="/common/utils.js">
<body>
<script src="/common/utils.js"></script>

<script src="resources/utils.js"></script><script src="resources/utils.js"></script><script src="/common/utils.js">
<body>
<script src="/common/utils.js"></script>

<script src="resources/utils.js"></script><body><script src="/common/utils.js">
<body>
<script src="/common/utils.js"></script>

<script src="resources/utils.js"></script><script src="resources/utils.js"></script><script src="resources/utils.js"></script><script src="resources/utils.js"></script><script src="resources/utils.js"></script><script src="resources/utils.js"></script>
promise_test(async t => {
      'resources/permission-notification-inner.html',
  const permission_notification_key = token();

  assert_equals(

  const permission_notification_key = token();
      'notification permission should not be granted in the fenced frame.');
  attachFencedFrame(generateURL(
      'notification permission should not be granted in the fenced frame.');
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);
}, 'notification permission should not be granted');
      'resources/permission-notification-inner.html',

  await test_driver.set_permission({name: 'notifications'}, 'granted', true);
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);

  assert_equals(

      actual_result, 'result: denied',
  const permission_notification_key = token();
promise_test(async t => {
</script></script></script></script><script src="/common/utils.js"></script><script src="/common/utils.js">
<script src="resources/utils.js"></script>
<script src="/common/utils.js"></script>

<body>
promise_test(async t => {
      'resources/permission-notification-inner.html',
  const permission_notification_key = token();

  assert_equals(

  const permission_notification_key = token();
      'notification permission should not be granted in the fenced frame.');
  attachFencedFrame(generateURL(
      'notification permission should not be granted in the fenced frame.');
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);
}, 'notification permission should not be granted');
      'resources/permission-notification-inner.html',

  await test_driver.set_permission({name: 'notifications'}, 'granted', true);
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);

  assert_equals(

      actual_result, 'result: denied',
  const permission_notification_key = token();
promise_test(async t => {
</script><script src="/common/utils.js">
<script src="resources/utils.js"></script>
<script src="/common/utils.js"></script>

<body>
promise_test(async t => {
      'resources/permission-notification-inner.html',
  const permission_notification_key = token();

  assert_equals(

  const permission_notification_key = token();
      'notification permission should not be granted in the fenced frame.');
  attachFencedFrame(generateURL(
      'notification permission should not be granted in the fenced frame.');
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);
}, 'notification permission should not be granted');
      'resources/permission-notification-inner.html',

  await test_driver.set_permission({name: 'notifications'}, 'granted', true);
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);

  assert_equals(

      actual_result, 'result: denied',
  const permission_notification_key = token();
promise_test(async t => {
</script><script><script>

<script>
  attachFencedFrame(generateURL(
promise_test(async t => {
      [permission_notification_key]));
</script><script>
  const actual_result = await nextValueFromServer(permission_notification_key);
}, 'notification permission should not be granted');
  const actual_result = await nextValueFromServer(permission_notification_key);
      actual_result, 'result: denied',
      [permission_notification_key]));
  attachFencedFrame(generateURL(
      'resources/permission-notification-inner.html',
      [permission_notification_key]));
  const actual_result = await nextValueFromServer(permission_notification_key);

  assert_equals(
      actual_result, 'result: denied',
      'notification permission should not be granted in the fenced frame.');
}, 'notification permission should not be granted');
</script><script>
promise_test(async t => {
  const permission_notification_key = token();
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);

  attachFencedFrame(generateURL(
      'resources/permission-notification-inner.html',
      [permission_notification_key]));
  const actual_result = await nextValueFromServer(permission_notification_key);

  assert_equals(
      actual_result, 'result: denied',
      'notification permission should not be granted in the fenced frame.');
}, 'notification permission should not be granted');
</script><script>
promise_test(async t => {
  const permission_notification_key = token();
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);

  attachFencedFrame(generateURL(
      'resources/permission-notification-inner.html',
      [permission_notification_key]));
  const actual_result = await nextValueFromServer(permission_notification_key);

  assert_equals(
      actual_result, 'result: denied',
      'notification permission should not be granted in the fenced frame.');
}, 'notification permission should not be granted');
</script><script>
promise_test(async t => {
  const permission_notification_key = token();
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);

  attachFencedFrame(generateURL(
      'resources/permission-notification-inner.html',
      [permission_notification_key]));
  const actual_result = await nextValueFromServer(permission_notification_key);

  assert_equals(
      actual_result, 'result: denied',
      'notification permission should not be granted in the fenced frame.');
}, 'notification permission should not be granted');
</script><script>
promise_test(async t => {
  const permission_notification_key = token();
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);

  attachFencedFrame(generateURL(
      'resources/permission-notification-inner.html',
      [permission_notification_key]));
  const actual_result = await nextValueFromServer(permission_notification_key);

  assert_equals(
      actual_result, 'result: denied',
      'notification permission should not be granted in the fenced frame.');
}, 'notification permission should not be granted');
</script><script>
promise_test(async t => {
  const permission_notification_key = token();
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);

  attachFencedFrame(generateURL(
      'resources/permission-notification-inner.html',
      [permission_notification_key]));
  const actual_result = await nextValueFromServer(permission_notification_key);

  assert_equals(
      actual_result, 'result: denied',
      'notification permission should not be granted in the fenced frame.');
}, 'notification permission should not be granted');
</script><script>
promise_test(async t => {
  const permission_notification_key = token();
  await test_driver.set_permission({name: 'notifications'}, 'granted', true);

  attachFencedFrame(generateURL(
      'resources/permission-notification-inner.html',
      [permission_notification_key]));
  const actual_result = await nextValueFromServer(permission_notification_key);

  assert_equals(
      actual_result, 'result: denied',
      'notification permission should not be granted in the fenced frame.');
}, 'notification permission should not be granted');
</script>

</body>
