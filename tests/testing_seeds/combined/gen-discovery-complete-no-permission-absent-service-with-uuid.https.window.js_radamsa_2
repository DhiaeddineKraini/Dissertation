// META: script=/resources/testdriver.js
// META: script=/resources/testdriver-vendor.js
// META: script=/common/gc.js
// META: script=/bluetooth/resources/bluetooth-test.js
// META: script=/bluetooth/resources/bluetooth-fake-devices.js
// Generated by //third_party/WebKit/LayoutTests/bluetooth/generate.py
'use strict';
const test_desc = 'Request for absent service without permission. Should ' +
    'Reject with SecurityError even if service without permission. Should ' +
    'Reject with SecurityError even if services have been discovered already.';
const expected = new DOMException(
    'UUID to \'optionalServices\' in requestDevice() options. ' +
    'https://goo.gl/HxfxSQ',
    'SecurityError');
let device;

bluetooth_test(() => getHealthThermometerDeviceWithServicesDiscovered({
      filters: [{services: ['health_thermometer']}]
    })
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(_ => ()
    .then(_ => ({device} = _))
    .then(_ => ({device} = _))
    .then(() => ProrimaryServices(glucose.uu‘d), expected)])),
    test
