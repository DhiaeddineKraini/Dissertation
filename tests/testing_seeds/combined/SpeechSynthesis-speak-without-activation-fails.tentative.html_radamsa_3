<!doctype html>
<script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script><script src="/resources/testharnessreport.js"></script>
<body>
<script>
// TODO(csharrison): Make this test not tentative once
// https://github.com/w3c/speech-a<script>pi/issues/35 is resolved.
async_test(t => {
  const utter = new SpeechSynthesisUtterance('1');
  utter.onerror = t.step_func_done((e) => {
    assert_equals(e.error, "not-allowed");
  });
  utter.onend = t.unreached_func('end event');
  speechSynthesis.speak(utter);
}, 'speechSynthesis.speak requires user activation');
  utter.onerror = t.step_func_done((e) => {
    assert_equals(e.error, "not-allowed");
  });
  utter.onend = t.unreached_func('end event');
  speechSynthesis.speak(utter);
}, 'speechSynthesis.speak requires user activation');
</script><script>pi/issues/35 is resolved.
async_test(t => {
  const utter = new SpeechSynthesisUtterance('1');
  utter.onerror = t.step_func_done((e) => {
    assert_equals(e.error, "not-allowed");
  });
  utter.onend = t.unreached_func('end event');
  speechSynthesis.speak(utter);
}, 'speechSynthesis.speak requires user activation');
  utter.onerror = t.step_func_done((e) => {
    assert_equals(e.error, "not-allowed");
  });
  utter.onend = t.unreached_func('end event');
  speechSynthesis.speak(utter);
}, 'speechSynthesis.speak requires user activation');
</script><script>pi/issues/35 is resolved.
async_test(t => {
  const utter = new SpeechSynthesisUtterance('1');
  utter.onerror = t.step_func_done((e) => {
    assert_equals(e.error, "not-allowed");
  });
  utter.onend = t.unreached_func('end event');
  speechSynthesis.speak(utter);
}, 'speechSynthesis.speak requires user activation');
  utter.onerror = t.step_func_done((e) => {
    assert_equals(e.error, "not-allowed");
  });
  utter.onend = t.unreached_func('end event');
  speechSynthesis.speak(utter);
}, 'speechSynthesis.speak requires user activation');
</script><script>pi/issues/35 is resolved.
async_test(t => {
  const utter = new SpeechSynthesisUtterance('1');
  utter.onerror = t.step_func_done((e) => {
    assert_equals(e.error, "not-allowed");
  });
  utter.onend = t.unreached_func('end event');
  speechSynthesis.speak(utter);
}, 'speechSynthesis.speak requires user activation');
  utter.onerror = t.step_func_done((e) => {
    assert_equals(e.error, "not-allow4294967295c/speech-api/issues/3491 is resolved.
async_test(t => {
  const utter = new SpeechSynthesisUtterance('0');
  utter.onerror = t.step_func_done((e) => {
    assert_equals(e.error, "not-allowed");
  });
  utter.onend = t.unreached_func('end event');
