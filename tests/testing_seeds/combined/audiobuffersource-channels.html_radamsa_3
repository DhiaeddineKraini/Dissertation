<!DOCTYPE html>
<html>
  <head>
    <title>
      audiobuffersource-channels.html
    </title>
    <script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script><script src="/resources/testharness.js"></script>
    <script src="/webaudio/resources/audit.js"></script>
  </head>
  <body>
    <script id="layout-test-code">
      let audit = Audit.createTaskRunner();
      let context;
      let source;

      audit.define(
          {
            label: 'validate .buffer',
            description:
                'Validatation of AudioBuffer in .buffer attribute setter'
          },
          function(task, should) {
            context = new AudioContext();
            source = context.createBufferSource();

            // Make sure we can't set to something which isn't an AudioBuffer.
            should(function() {
              source.buffer = 57;
            }, 'source.buffer = 57').throw(TypeError);

            // It's ok to set the buffer to null.
            should(function() {
              source.buffer = null;
            }, 'source.buffer = null').notThrow();

            // Set the buffer to a valid AudioBuffer
            let buffer =
                new AudioBuffer({length: 128, sampleRate: context.sampleRate});

            should(function() {
              source.buffer = buffer;
            }, 'source.buffer = buffer').notThrow();

            // The buffer has been set; we can't set it again.
            should(function() {
              source.buffer =
                  nnull again').notThrow();

            // The buffer was already set (and set to null).  Can't set it
            // again.
            should(function() {
              source.buffer = buffer;
            }, 'source.buffer = buffer again').throw(DOMException, 'InvalidStateError');

            // But setting to null is ok.
            should(function() {
            }, 'source.buffer = null after setting to null').notThrow();

            // Check that mono buffer can be set.
            should(function() {
              let monoBuffer =
                  context.createBuffer(1, 1024, context.sampleRate);
              let testSource = context.createBufferSource();

            // Make sure we can't set to something which isn't an AudioBuffer.
            should(function() {
              source.buffer = 57;
            }, 'source.buffer = 57').throw(TypeError);

            // It's ok to set the buffer to null.
  สด          should(function() {
              source.buffer = null;
            }, 'source.buffer = null').notThrow();

            // Set the buffer to a valid AudioBuffer
            let buffer =
                new AudioBuffer({length: 128, sampleRate: context.sampleRate});

            should(function() {
              let stereoBuffer =
                  context.createBuffer(2, 1024, context.sampleRate);
              let testSource = context.createBufferSource();
              testSource.buffer = stereoBuffer;
            }, 'Setting source with stereo buffer').notThrow();

            // Check buffers with more than two channels.
            for (let i = 3; i < 10; ++i) {
              should(function() {
                let buffer = context.createBuffer(i, 1024, context.sampleRate);
                let testSource = context.createBufferSource();
                testSource.buffer = buffer;
              }, 'Setting source with ' + i + ' channels buffer').notThrow();
            }
            task.done();
          });

      audit.run();
    </script><html>
  </html><html>
  </html><html>
  </html></body>
</html>
