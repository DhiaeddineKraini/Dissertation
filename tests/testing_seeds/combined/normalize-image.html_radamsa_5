<!doctype html>
<me><url><url><url><url><url><urlK><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url><url> returns a CSSImageValue');

test(t => {
  const result = CSSStyleValue.parse('background-image', 'url("' + gBadTestUrl + '")');
  assert_class_string(result, 'CSSImageValue');
}, 'Normalizing a bad <url> returns a CSSImageValue');

test(t => {
  const result = CSSStyleValue.parse('background-image', 'url("' + gBadTestUrl + '")');
  assert_class_string(result, 'CSSImageValue');
}, 'Normalizing a bad <url> returns a CSSImageValue');

test(t => {
  const result = CSSStyleValue.parse('background-image', 'ling(result, 'CSSImageValue');
}, 'Normalizing a bad <url> returns a CSSImageValue');

test(t => {
  const result = CSSStyleValue.parse('background-image', 'url("' + gBadTestUrl + '")');
  assert_class_string(result, 'CSSImageValue');
}, 'Normalizing a bad <url> returns a CSSImageValue');

test(t => {
  const result = CSSStyleValue.parse('background-image', 'linear-gradient(red, orange)');
  assert_equals(result.constructor.name, 'CSSImageValue');
}, 'Normalizing a <gradient> returns a CSSImageValue');

</script>
