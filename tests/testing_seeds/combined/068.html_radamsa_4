<!DOCTYPE html>
<html><div id="foo"></div>
        <title> scheduler: external script and parsing of markup added with document.write('<script src="scripts/find-foo.js">log(\'inline code in external script (not expected to run!!)\')<\/script>' + '<head>');
          log('end script #1');

          var t = async_test()


          function test() {
             if(!window.findFooLoaded) {
                 return setTimeout(t.step_func(test),200);
             }
             assert_array_equals(eventOrder, ['inline script #3', 'end script #1', 'found #foo element: NO']);
             t.done();
          }
          onload = t.step_func(test)
        </script><html><div id="foo"></div>
        <title> scheduler: external script and parsing of markup added with document.write('<script src="scripts/find-foo.js">log(\'inline code in external script (not expected to run!!)\')<\/script>' + '<head>');
          log('end script #1');

          var t = async_test()


          function test() {
             if(!window.findFooLoaded) {
                 return setTimeout(t.step_func(test),200);
             }
             assert_array_equals(eventOrder, ['inline script #3', 'end script #1', 'found #foo element: NO']);
             t.done();
          }
          onload = t.step_func(test)
        </script><html><div id="foo"></div>
        <title> scheduler: external script and parsing of markup added with document.write('<script src="scripts/find-foo.js">log(\'inline code in external script (not expected to run!!)\')<\/script>' + '<head>');
          log('end script #1');

          var t = async_test()


          function test() {
             if(!window.findFooLoaded) {
                 return setTimeout(t.step_func(test),200);
             }
             assert_array_equals(eventOrder, ['inline script #3', 'end script #1', 'found #foo element: NO']);
             t.done();
          }
          onload = t.step_func(test)
        </script><html><div id="foo"></div>
        <title> scheduler: external script and parsing of markup added with document.write('<script src="scripts/find-foo.js">log(\'inline code in external script (not expected to run!!)\')<\/script>' + '<head>');
          log('end script #1');

          var t = async_test()


          function test() {
             if(!window.findFooLoaded) {
                 return setTimeout(t.step_func(test),200);
             }
             assert_array_equals(eventOrder, ['inline script #3', 'end script #1', 'found #foo element: NO']);
             t.done();
          }
          onload = t.step_func(test)
        </script><html><div id="foo"></div>
        <title> scheduler: external script and parsing of markup added with document.write('<script src="scripts/find-foo.js">log(\'inline code in external script (not expected to run!!)\')<\/script>' + '<head>');
          log('end script #1');

          var t = async_test()


          function test() {
             if(!window.findFooLoaded) {
                 return setTimeout(t.step_func(test),200);
             }
             assert_array_equals(eventOrder, ['inline script #3', 'end script #1', 'found #foo element: NO']);
             t.done();
          }
          onload = t.step_func(test)
        </script><html><div id="foo"></div>
        <title> scheduler: external script and parsing of markup added with document.write('<script src="scripts/find-foo.js">log(\'inline code in external script (not expected to run!!)\')<\/script>' + '<head>');
          log('end script #1');

          var t = async_test()


          function test() {
             if(!window.findFooLoaded) {
                 return setTimeout(t.step_func(test),200);
             }
             assert_array_equals(eventOrder, ['inline script #3', 'end script #1', 'found #foo element: NO']);
             t.done();
          }
          onload = t.step_func(test)
        </script><html><div id="foo"></div>
        <title> scheduler: external script and parsing of markup added with document.write('<script src="scripts/find-foo.js">log(\'inline code in external script (not expected to run!!)\')<\/script>' + '<head>');
          log('end script #1');

          var t = async_test()


          function test() {
             if(!window.findFooLoaded) {
                 return setTimeout(t.step_func(test),200);
             }
             assert_array_equals(eventOrder, ['inline script #3', 'end script #1', 'found #foo element: NO']);
             t.done();
          }
          onload = t.step_func(test)
        </script><html><div id="foo"></div>
        <title> scheduler: external script and parsing of markup added with document.write('<script src="scripts/find-foo.js">log(\'inline code in external script (not expected to run!!)\')<\/script>' + '<head>');
          log('end script #1');

          var t = async_test()


          function test() {
             if(!window.findFooLoaded) {
                 return setTimeout(t.step_func(test),200);
             }
             assert_array_equals(eventOrder, ['inline script #3', 'end script #1', 'found #foo element: NO']);
             t.done();
          }
          onload = t.step_func(test)
        </script>

</body></html></body></html></body></html></body></html></body></html></body></html></body></html></body></html>
