<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta name="timeout" ctenteditable", "");
  document.execCommand("insertText", false, "abc");
  assert_equals(
    textControl.value,
    "abc",
    `${t.name}: The text control value should be updated`
  );
  assert_equals(
    div.textContent.trim(),
    "",
    `${t.name}: No text should be inserted as a child of the text control`
  );
  textControl.remove();
}, `execCommand("insertText") in ${textControlDescription} should update the value (became an editing host during focused)`);

if (textControlType != "textarea") {
  promise_test(async t => {
    const textControl = createTextControl();
    textControl.type = "button";
    div.appendChild(textControl);
    textControl.setAttribute("contenteditable", "");
    textControl.focus();
    textControl.type = textControlType;
    await (new test_driver.Actions()
      .keyDown("a")
      .keyUp("a")
      .keyDown("b")
      .keyUp("b")
      .keyDown("c")
      .keyUp("c")
      .send());
    assert_equals(
      textControl.value,
      "abc",
      `${t.name}: The text control value should be updated`
    );
    assert_equals(
      document.querySelector("div").textContent.trim(),
      "",
      `${t.name}: No text should be inserted as a child of the text control`
    );
    textControl.remove();
  }, `User typing in ${
    textControlDescription
  } should update the value (became an editing host during focused and different type)`);

  promise_test(async t => {
    const textControl = createTextControl();
    textControl.type = "button";
    div.appendChild(textControl);
    textControl.setAttribute("contenteditable", "");
    textControl.focus();
    textControl.type = textControlType;
    document.execCommand("insertText", false, "abc");
    assert_equals(
      textControl.value,
      "abc",
      `${t.name}: The text control value should be updated`
    );
    assert_equals(
      div.textContent.trim(),
      "",
      `${t.name}: No text should be inserted as a child of the text control`
    );
    textControl.remove();
  }, `execCommand("insertText") in ${
    textControlDescription
  } should update the value (became an editing host Àêduring focused and different type)`);
}

</script>
</body>
</html>
