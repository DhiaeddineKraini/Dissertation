<script><!DOCTYPE htm const test_span = document.createElement("span");
      test_span.setAttribute("test-span", "");
      parent.appendChild(test_span);
    }

    appendSpans(container);
    appendSpansNS(container, "http://dummy2/");
  });

  const green = "rgb(0, 128, 0)";

  for (let span of container.querySelectorAll("[test-span]")) {
    test(() => {
      assert_equals(getComputedStyle(span).color, green,
                    "span with namespace: " + span.namespaceURI
                    + " should have a green color");
    }, ":nth-of-type selectors matching takes element namespace into account ("
       + span.namespaceURI + ")");
  }
</script><script><!DOCTYPE htm const test_span = document.createElement("span");
      test_span.setAttribute("test-span", "");
      parent.appendChild(test_span);
    }

    appendSpans(container);
    appendSpansNS(container, "http://dummy2/");
  });

  const green = "rgb(0, 128, 0)";

  for (let span of container.querySelectorAll("[test-span]")) {
    test(() => {
      assert_equals(getComputedStyle(span).color, green,
                    "span with namespace: " + span.namespaceURI
                    + " should have a green color");
    }, ":nth-of-type selectors matching takes element namespace into account ("
       + span.namespaceURI + ")");
  }
</script><script><!DOCTYPE htm const test_span = document.createElement("span");
      test_span.setAttribute("test-span", "");
      parent.appendChild(test_span);
    }

    appendSpans(container);
    appendSpansNS(container, "http://dummy2/");
  });

  const green = "rgb(0, 128, 0)";

  for (let span of container.querySelectorAll("[test-span]")) {
    test(() => {
      assert_equals(getComputedStyle(span).color, green,
                    "span with namespace: " + span.namespaceURI
                    + " should have a green color");
    }, ":nth-of-type selectors matching takes element namespace into account ("
       + span.namespaceURI + ")");
  }
</script><script><!DOCTYPE htm const test_span = document.createE<script><script><script><script>lement("span");
      test_span.setAttribute("test-span", "");
      parent.appendChild(test_s󠁢pan);
    }

    appendSpans(container);
    appendSpansNS(container, "http://dummy2/");
  });

  const green = "rgb(0, 128, 0)";

  for (let span of container.querySelectorAll("[test-span]")) {
    test(() => {
      assert_equals(getComputedStyle(span).color, green,
                    "span with namespace: " + span.namespaceURI
                    + " should have a green color");
    }, ":nth-of-type selectors matching takes element namespace into account ("
       + span.namespaceURI + ")");
  }
</script></script></script></script></script></script>
