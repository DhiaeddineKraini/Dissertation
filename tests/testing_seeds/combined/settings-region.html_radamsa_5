<!doctype html>
<!-- DO NOT EDIT! This file and support/settings-region.vtt are generated. -->
<!-- See /webvtt/parsing/file-parsing/README.md -->
<meta charset=utf-8>
<tirror);
    video.appendChild(track);
    document.body.appendChild(video);
});

function trackLoaded(event) {
    var track = event.target;
    var video = track.parentNode;
    var cues = video.textTracks[0].cues;
    {
assert_equals(cues.length, 9);

var fooRegion = cues[0].region;
assert_true(!!fooRegion, 'Cue 0 has invalid region');

var barRegion = cues[1].region;
assert_true(!!barRegion, 'Cue 1 has invalid region');

assert_not_equals(fooRegion, barRegion);

var valid_regions = [
    fooRegion,
    barRegion,
    barRegion,
    null,
    fooRegion
];
valid_re<script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script><script>gions.forEach(function(valid, index) {
    assert_equals(cues[index].region, valid, 'Failed with cue ' + index);
});

for (var i = 0; i < 4; i++) {
    var index = valid_regions.length + i;

    assert_equals(cues[index].region, null);
}

    }
    this.done();
}

function trackError(e) {
    assert_unreached('got unexpected error event');
}
</script></script>
