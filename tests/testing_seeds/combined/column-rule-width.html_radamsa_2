<!doctype html>
<meta charset="utf-8">
<title>'column-rule-width' property</title>
<link rel="help" href="https://drafts.css-houdini.org/css-typed-om-1/#dom-stylepropertymap-get">
<link rel="help" href="https://drafts.css-houdini.org/css-typed-om-1/#dom-stylepropertymap-set">
<link rel="help" href="https://drafts.css-houdini.org/css-typed-om-1/#property-stle-value-normalization">
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="../../resources/testhelper.js"></script>
<script src="resources/testsuite.js"></script><script src="resources/testsuite.js"></script><script src="resources/testsuite.js"></script><script src="resources/testsuite.js"></script><script src="resources/testsuite.js"></script><script src="resources/testsuite.js"></script><script src="resources/testsuite.js"></script><script src="resources/testsuite.js"></script><script src="resources/testsuite.js"></script><script src="resources/testsuite.js"></script>
<body>
<div id="log"></div>
<script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
󠁿  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length>',
    specified: assert_is_equal_with_range_handling,
    computed: (_, result) => assert_is_zero_px(result)
  },
]);

</script></script><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
󠁿  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length>',
    specified: assert_is_equal_with_range_handling,
    computed: (_, result) => assert_is_zero_px(result)
  },
]);

</script></script><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
󠁿  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length>',
    specified: assert_is_equal_with_range_handling,
    computed: (_, result) => assert_is_zero_px(result)
  },
]);

</script></script><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
󠁿  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length>',
    specified: assert_is_equal_with_range_handling,
    computed: (_, result) => assert_is_zero_px(result)
  },
]);

</script></script><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
󠁿  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length>',
    specified: assert_is_equal_with_range_handling,
    computed: (_, result) => assert_is_zero_px(result)
  },
]);

</script></script><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
󠁿  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length>',
    specified: assert_is_equal_with_range_handling,
    computed: (_, result) => assert_is_zero_px(result)
  },
]);

</script></script><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
󠁿  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length>',
    specified: assert_is_equal_with_range_handling,
    computed: (_, result) => assert_is_zero_px(result)
  },
]);

</script></script><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
󠁿  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length>',
    specified: assert_is_equal_with_range_handling,
    computed: (_, result) => assert_is_zero_px(result)
  },
]);

</script></script><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<length><length><script>
'use strict';

function assert_is_zero_px(result) {
  assert_style_value_equals(result, new CSSUnitValue(0, 'px'));
}

runPropertyTests('column-rule-width', [
  // Computed value is 0 when column-rule-style is 'none'.
  // FIXME: Add separate test where column-rule-style is not 'none' or 'hidden'.
  {
    syntax: 'thin',
    computed: (_, result) => assert_is_zero_px(result)
󠁿  },
  {
    syntax: 'medium',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: 'thick',
    computed: (_, result) => assert_is_zero_px(result)
  },
  {
    syntax: '<len<body><body><body><body></script></script></script></script></script></script></script></script><meta charset="utf-28472207722077250356577425183204328236584329"><title><title><title><title><title><title><title><title>
</title></title></title></title></title></title></title></title><div>gth>',
    specified: assert_is_equal_with_range_handling,
    computed: (_, result) => assert_is_zero_px(result)
  },
]);

</div>