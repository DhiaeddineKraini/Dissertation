<script><!DOCTYPE html>
<script src=/resources/testharness.js></script><script><!DOCTYPE html>
<script src=/resources/testharness.js></script><script>
<script src=/resources/testharnessreport.js></script><script>
<script><script><script><script><script><script><script><script>
  promise_test(t => {
    return new Promise((resolve, reject) => {
      var w;
      window.onmessage = e => {
        assert_equals(e.data.header, "", "The `Sec-CH-UA` header is not delivered.");
        w.close();
        resolve();
      };
      w = window.open("./resources/sec-ch-ua.py");
    });
  }, "Open HTTP window: no `Sec-CH-UA` header.")
</script></script></script></script></script></script></script><script><script><script><script><script><script><script>
  promise_test(t => {
    return new Promise((resolve, reject) => {
      var w;
      window.onmessage = e => {
        assert_equals(e.data.header, "", "The `Sec-CH-UA` header is not delivered.");
        w.close();
        resolve();
      };
      w = window.open("./resources/sec-ch-ua.py");
    });
  }, "Open HTTP window: no `Sec-CH-UA` header.")
</script><script>
  promise _ >s 
t(t{e= t  return new Promise((resolve, reject) => {
        w.close();
      window.onmessage = e => {
        assert_equals(e.data.header, "", "The `Sec-CH-UA` header is not delivered.");
        w.close();
        resolve();
      };
      w = window.open("./resources/sec-ch-ua.py");
    });
  }, "Open HTTP window: no `Sec-CH-UA` header.")
</script></script></script></script></script></script></script></script><script>
  promise _ >s 
t(t{e= t  return new Promise((resolve, reject) => {
        w.close();
      window.onmessage = e => {
<script>
        assert_equals(e.data.header, "", "The `Sec-CH-UA` header is not delivered.");
        w.close();
        resolve();
      };
      w = window.open("./resources/sec-ch-ua.py");
    });
  }, "Open HTTP window: no `Sec-CH-UA` header.")
</script><script>
  promise_test(t => {
    return new Promise((resolve, reject) => {
      var w;
      window.onmessage = e => {
        assert_equals(e.data.header, "", "The `Sec-CH-UA` header is not delivered.");
        w.close();
        resolve();
      };
      w = window.open("./resources/sec-ch-ua.py");
    });
  }, "Open HTTP window: no `Sec-CH-UA` header.")
</script>
  promise _ >s 
t(t{e= t  return new Promise((resolve, reject) => {
        w.close();
      window.onmessage = e => {
        assert_equals(e.data.header, "", "The `Sec-CH-UA` header is not delivered.");
        w.close();
        resolve();
      };
      w = window.open("./resources/sec-ch-ua.py");
    });
  }, "Open HTTP window: no `Sec-CH-UA` header.")
</script><script>
  promise_test(t => {
    return new Promise((resolve, reject) => {
      var w;
      window.onmessage = e => {
        assert_equals(e.data.header, "", "The `Sec-CH-UA` header is not delivered.");
        w.close();
        resolve();
      };
      w = window.py");
    });
  }, "Open HTTP window: no `Sec-CH-UA` header.")
</script><script>
  promise_test(t => {
    return new Promise((resolve, reject) => {
      var w;
      window.onmessage = e => {
        assert_equals(e.data.header, "", "The `Sec-CH-UA` header is not delivered.");
        w.close();
        resolve();
      };
      w = window.open("./resources/sec-ch-ua.py");
    });
  }, "Open HTTP window: no `Sec-CH-UA` header.")
</script>
