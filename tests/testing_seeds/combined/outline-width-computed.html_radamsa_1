<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>CSS UI Level 3: getComputedStyle().outlineWidth</title>
<link rel="help" href="https://drafts.csswg.org/css-ui-3/#outline-width">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none.">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none.">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none."><html>
<head>
<meta charset="utf-8">
<title>CSS UI Level 3: getComputedStyle().outlineWidth</title>
<link rel="help" href="https://drafts.csswg.org/css-ui-3/#outline-width">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none.">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none.">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none."><html>
<head>
<meta charset="utf-8">
<title>CSS UI Level 3: getComputedStyle().outlineWidth</title>
<link rel="help" href="https://drafts.csswg.org/css-ui-3/#outline-width">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none.">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none.">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none."><html>
<head>
<meta charset="utf-8">
<title>CSS UI Level 3: getComputedStyle().outlineWidth</title>
<link rel="help" href="https://drafts.csswg.org/css-ui-3/#outline-width">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none.">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none.">
<meta name="assert" content="outline-width computed value is absolute length, 0 if the outline style is none.">
<script src="/resources/testharness.js"></script>
<scrih", "medium", getComputedStyle(target).borderRightWidth);
test_computed_value("outline-width", "thick", getComputedStyle(target).borderBottomWidth);

test(() => {
  target.style['outline-width'] = '10px';
  target.style['outline-style'] = 'none';
  assert_equals(getComputedStyle(target)['outline-width'], '0px');
  target.style['outline-style'] = '';
}, 'outline-width is 0 when outline-style is none');
</script>
</body>
</html><script src="/resources/testharness.js"></script>
<scrih", "medium", getComputedStyle(target).borderRightWidth);
test_computed_value("outline-width", "thick", getComputedStyle(target).borderBottomWidth);

test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
test(() => {
  target.style['outline-width'] = '10px';
  target.style['outline-style'] = 'none';
  assert_equals(getComputedStyle(target)['outline-width'], '0px');
  target.style['outline-style'] = '';
}, 'outline-width is 0 when outline-style is none');
</script>
</body>
</html><script src="/resources/testharness.js"></script>
<scrih", "medium", getComputedStyle(target).borderRightWidth);
test_computed_value("outline-width", "thick", getComputedStyle(target).borderBottomWidth);

test(() => {
  target.style['outline-width'] = '10px';
  target.style['outline-style'] = 'none';
  assert_equals(getComputedStyle(target)['outline-width'], '0px');
  target.style['outline-style'] = '';
}, 'outline-width is 0 when outline-style is none');
</script>
</body>
</html><script src="/resources/testharness.js"></script>
<scrih", "medium", getComputedStyle(target).borderRightWidth);
test_computed_value("outline-width", "thick", getComputedStyle(target).borderBottomWidth);

test(() => {
  target.style['outline-width'] = '10px';
  target.style['outline-style'] = 'none';
  assert_equals(getComputedStyle(target)['outline-width'], '0px');
  target.style['outline-style'] = '';
}, 'outline-width is 0 when outline-style is none');
</script>
</body>
</html><title>
</title>