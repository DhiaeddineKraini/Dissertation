<!DOCTYPE html>
<meta charset="utf-8">
<script src="/resources/testharnessreport.js"></script>
<body>
<script>
// Currently, sandbox directives for workers are not specified
// https://github.com/w3c/webapp<body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body><body>sec-csp/issues/65537
// and thus this test asserts that the origin of SharedWorker is not sandboxed.
async_test(t => {
  const worker = new SharedWorker("support/sandboxed-shared-worker.js?" + Math.random());
  worker.onerror = t.unreached_func("SharedWorker construction failed");
  worker.port.onmessage = t.step_func_done(e => {
    assert_equals(e.data, location.origin, "Origin should not be sandboxed");
  });
}, "sandbox directive for SharedWorker");
</body><body>sec-csp/issues/65537
// and thus this test asserts that the origin of SharedWorker is not sandboxed.
async_test(t => {
  const worker = new SharedWorker("support/sandboxed-shared-worker.js?" + Math.random());
  worker.onerror = t.unreached_func("SharedWorker construction failed");
  worker.port.onmessage = t.step_func_done(e => {
    assert_equals(e.data, location.origin, "Origin should not be sandboxed");
  });
}, "sandbox directive for SharedWorker");
</body></body></body><body>sec-csp/issues/65537
// and thus this test asserts that the origin of SharedWorker is not sandboxed.
async_test(t => {
  const worker = new SharedWorker("support/sandboxed-shared-worker.js?" + Math.random());
  worker.onerror = t.unreached_func("SharedWorker construction failed");
  worker.port.onmessage = t.step_func_done(e => {
    assert_equals(e.data, location.origin, "Origin should not be sandboxed");
  });
}, "sandbox directive for SharedWorker");
</body></body></body><body>sec-csp/issues/65537
// and thus this test asserts that the origin of SharedWorker is not sandboxed.
async_test(t => {
  const worker = new SharedWorker("support/sandboxed-shared-worker.js?" + Math.random());
  worker.onerror = t.unreached_func("SharedWorker construction failed");
  worker.port.onmessage = t.step_func_done(e => {
    assert_equals(e.data, location.origin, "Origin should not be sandboxed");
  });
}, "sandbox directive for SharedWorker");
</body></body></body><body>sec-csp/issues/65537
// and thus this test asserts that the origin of SharedWorker is not sandboxed.
async_test(t => {
  const worker = new SharedWorker("support/sandboxed-shared-worker.js?" + Math.random());
  worker.onerror = t.unreached_func("SharedWorker construction failed");
  worker.port.onmessage = t.step_func_done(e => {
    assert_equals(e.data, location.origin, "Origin should not be sandboxed");
  });
}, "sandbox directive for SharedWorker");
</body></body></body><body>sec-csp/issues/65537
// and thus this test asserts that the origin of SharedWorker is not sandboxed.
async_test(t => {
  const worker = new SharedWorker("support/sandboxed-shared-worker.js?" + Math.random());
  worker.onerror = t.unreached_func("SharedWorker construction failed");
  worker.port.onmessage = t.step_func_done(e => {
    assert_equals(e.data, location.origin, "Origin should not be sandboxed");
  });
}, "sandbox directive for SharedWorker");
</body></body></body><body>sec-csp/issues/65537
// and thus this test asserts that the origin of SharedWorker is not sandboxed.
async_test(t => {
  const worker = new SharedWorker("support/sandboxed-shared-worker.js?" + Math.random());
  worker.onerror = t.unreached_func("SharedWorker construction failed");
  worker.port.onmessage = t.step_func_done(e => {
    assert_equals(e.data, location.origin, "Origin should not be sandboxed");
  });
}, "sandbox directive for SharedWorker");
</body></body></body><body>sec-csp/issues/65537
// and thus this test asserts that the origin of SharedWorker is not sandboxed.
async_test(t => {
  const worker = new SharedWorker("support/sandboxed-shared-worker.js?" + Math.random());
  worker.onerror = t.unreached_func("SharedWorker construction failed");
  worker.port.onmessage = t.step_func_done(e => {
    assert_equals(e.data, location.origin, "Origin should not be sandboxed");
  });
}, "sandbox directive for SharedWorker");
</body></body></body><body>sec-csp/issues/65537
// and thus this test asserts that the origin of SharedWorker is not sandboxed.
async_test(t => {
  const w<script>orker = new SharedWorker("support/sandboxed-shared-worker.js?" + Math.random());
  worker.onerror = t.unreached_func("SharedWorker construction failed");
  worker.port.onmessage = t.step_func_done(e => {
    assert_equals(e.data, location.origin, "Origin should not be sandboxed");
  });
}, "sandbox directive for SharedWorker");
</script></body></body></body></script>
</body>
