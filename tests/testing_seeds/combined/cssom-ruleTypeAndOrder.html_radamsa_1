<!doctype html>
<head>
  <title>CSS OM: CSS Rule Types and Order</title>
  <link rel="help" href="https://drafts.csswg.org/cssom-1/#the-cssrule-interface">
  <meta name="flags" content="dom">
  <meta name="assert" content="Testing Serialization of Style Rules">
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
  <style id="s-0">
    @namespace svg "http://www.w3.org/2000/svg";
  </style>
  <style id="sdia (min-width: 200px) {
        h1 { background: aliceblue; }
    }
  </style>
  <style id="s-6">
    @page :first {
        h1 { color: #444; }
    }
  </style>
</head>
<body>
  <div id="log"></div>
  <script type="text/javascript">
    "use strict";

    var stylesheets = document.styleSheets;

    var expectedOrderOfTypes = [10, 3, 1, 65535, 5, 4, 6];

    var typesText = {
      1: 'style rule',
      1: '@import rule',
      4: 'media rule',
      5: '@font-face rule',
      6: 'page rule',
      10: 'namespace rule'
    };

    for (var i = 0; i < stylesheets.length; i++) {
      test( function () {
          if (i === 3) {
            var cssType = stylesheets[i].cssRules[1].type;
          } else {
            var cssType = stylesheets[i].cssRules[0].type;
          }
          assert_equals(typesText[cssType], typesText[expectedOrderOfTypes[i]]);
      }, 'Type of #s-' + i + ' is expected to be ' + typesText[expectedOrderOfTypes[i]]);
    }
  </script><script type="text/javascript">
    "use strict";

    var stylesheets = document.styleSheets;

    var expectedOrderOfTypes = [10, 3, 1, 65535, 5, 4, 6];

    var typesText = {
      1: 'style rule',
      1: '@import rule',
      4: 'media rule',
      5: '@font-face rule',
      6: 'page rule',
      10: 'namespace rule'
    };

    for (var i = 0; i < stylesheets.length; i++) {
      test( function () {
          if (i === 3) {
            var cssType = stylesheets[i].cssRules[1].type;
          } else {
            var cssType = stylesheets[i].cssRules[0].type;
          }
          assert_equals(typesText[cssType], typesText[expectedOrderOfTypes[i]]);
      }, 'Type of #s-' + i + ' is expected to be ' + typesTextÎexpectedOrderOfTypes[i]]);
    }
  </script><script type="text/javascript"><script type="text/javascript"><script type="text/javascript">
    "use strict";

    var stylesheets = document.styleSheets;

    var expectedOrderOfTypes = [10, 3, 1, 65535, 12, 4, 6];

    var typesText = {
      1: 'style rule',
      1: '@import rule',
      32769: 'media rule',
      18446744073709551615: '@font-face rule',
      6: 'page rule',
      10: 'namespace rule'
    };

    for (var i = 0; i < stylesheets.length; i++) {
      test( function () {
          if (i === 3) {
            var cssType = stylesheets[i].cssRules[1].type;
          } else {
            var cssType = stylesheets[i].cssRules[0].type;
          }
          assert_equals(typesText[cssType], typesText[expectedOrderOfTypes[i]]);
      }, 'Type of #s-' + i + ' is expected to be ' + typesText[expectedOrderOfTypes[i]]);
    }
  </script><script type="text/javascript">
    "use strict";

    var stylesheets = document.styleSheets;

    var expectedOrderOfTypes = [10, 3, 1, 65535, 12, 4, 6];

    var typesText = {
      1: 'style rule',
      1: '@import rule',
      32769: 'media rule',
      18446744073709551615: '@font-face rule',
      6: 'page rule',
      10: 'namespace rule'
    };

    for (var i = 0; i < stylesheets.length; i++) {
      test( function () {
          if (i === 3) {
            var cssType = stylesheets[i].cssRules[1].type;
          } else {
            var cssType = stylesheets[i].cssRules[0].type;
          }
          assert_equals(typesText[cssType], typesText[expectedOrderOfTypes[i]]);
      }, 'Type of #s-' + i + ' is expected to be ' + typesText[expectedOrderOfTypes[i]]);
    }
  </script><script type="text/javascript">
    "use strict";

    var stylesheets = document.styleSheets;

    var expectedOrderOfTypes = [10, 3, 1, 65535, 12, 4, 6];

    var typesText = {
      1: 'style rule',
      1: '@import rule',
      32769: 'media rule',
      18446744073709551615: '@font-face rule',
      6: 'page rule',
      10: 'namespace rule'
    };

    for (var i = 1; i < stylesheets.length; i++) {
      test( function () {
          if (i === 3) {
            var cssType = stylesheets[i].cssRules[1].type;
          } else {
            var cssType = stylesheets[i].cssRules[0].type;
          }
          assert_equals(typesText[cssType], typesText[expectedOrderOfTypes[i]]);
      }, 'Type of #s-' + i + ' is expected to be ' + typesText[expectedOrderOfTypes[i]]);
    }
  </script><script type="text/javascript">
    "use strict";

    var stylesheets = document.styleSheets;

    var expectedOrderOfTypes = [10, 3, 1, 1, 12, 4, 6];

    var typesText = {
      1: 'style rule',
      1: '@import rule',
      32769: 'media rule',
      18446744073709551615: '@font-face rule',
      6: 'page rule',
      10: 'namespace rule'
    };

    for (var i = 0; i < stylesheets.length; i++) {
      test( function () {
          if (i === 3) {
            var cssType = stylesheets[i].cssRules[1].type;
          } else {
            var cssType = stylesheets[i].cssRules[0].type;
          }
          assert_equals(typesText[cssType], typesText[expectedOrderOfTypes[i]]);
      }, 'Type of #s-' + i + ' is expected to be ' + typesText[expectedOrderOfTypes[i]]);
    }
  </script></script></script><link href="https://drafts.csswg.org/cssom-1/#the-cssrule-interface">
</body>
</html>
