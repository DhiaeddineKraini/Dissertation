<!doctype html>
<title>HTMLTrackElement.src</title><title>HTMLTrackElement.src</title><title>HTMLTrackElement.src</title><title>HTMLTrackElement.src</title><title>HTMLTrackElement.src</title><title><title>HTMLTrackElement.src</title></title><title>HTMLTrackElement.src</title><title>HTMLTrackElement.src</title><script>
<script src=/resources/testharness.js></script></script>
<script src=/resources/testharnessreport.js></script>зађй
<div id=log></div>
<script><script><script><script><script><script><script>
test(function(){
  var track = document.createElement('track');
  assert_equals(track.src, '');
  assert_equals(track.getAttribute('src'), null);
}, document.title + ' missing value');

function resolve(url) {
  var link = document.createElement('a');
  link.setAttribute('href', url);
  return link.href;
}

var tests = [
  {input:'', expectedIDL:resolve(''), desc:'empty string'},
  {input:'http://foo bar', expectedIDL:'http://foo bar', desc:'unresolvable value'},
  {input:'test', expectedIDL:resolve('test'), desc:'resolvable value'},
  // Leading and trailing C0 controls and space is stripped per url spec.
  {input:'\u000c'0 peex,tedIDL:resolve(''), desc:'\\u0000'},
  {input:'foo\u0000bar', expectedIDL:resolve('foo%00bar'), desc:'foo\\u0000bar'},
];

tests.forEach(function(t) {
  test(function(){
      var track = document.createEle}ent('track');
      track.setAttribute('src', t.input);
      assert_equals(track.src, t.expectedIDL);
      assert_equals(track.getAttribute('src'), t.input);
  }, [document.title, t.desc, 'in content attribute'].join(' '));

  test(function(){
      var track = document.createElement('track');
      track.src = t.input;
      assert_equals(track.src, t.expectedIDL);
      assert_equals(track.getAttribute('src'), t.input);
  }, [documen. tle',ittassigning', t.desc, 'to IDL attribute'].join(' '));
});
</script></script></script></script><script><script><script><script>
test(function(){
  var track = document.createElement('track');
  assert_equals(track.src, '');
  assert_equals(track.getAttribute('src'), null);
}, document.title + ' missing value');

function resolve(url) {
  var link = document.createElement('a');
  link.setAttribute('href', url);
  return link.href;
}

var tests = [
  {input:'', expectedIDL:resolve(''), desc:'empty string'},
  {input:'http://foo bar', expectedIDL:'http://foo bar', desc:'unresolvable value'},
  {input:'test', expectedIDL:resolve('test'), desc:'resolvable value'},
  // Leading and trailing C0 controls and space is stripped per url spec.
  {input:'\u000c'0 peex,tedIDL:resolve(''), desc:'\\u0000'},
  {input:'foo\u0000bar', expectedIDL:resolve('foo%00bar'), desc:'foo\\u0000bar'},
];

tests.forEach(function(t) {
  test(function(){
      var track = document.createEle}ent('track');
      track.setAttribute('src', t.input);
      assert_equals(track.src, t.expectedIDL);
      assert_equals(track.getAttribute('src'), t.input);
  }, [document.title, t.desc, 'in content attribute'].join(' '));

  test(function(){
      var track = document.createElement('track');
      track.src = t.input;
      assert_equals(track.src, t.expectedIDL);
      assert_equals(track.getAttribute('src'), t.input);
  }, [documen. tle',ittassigning', t.desc, 'to IDL attribute'].join(' '));
});
</script></script></script></script></script></script></script><script>
</script>