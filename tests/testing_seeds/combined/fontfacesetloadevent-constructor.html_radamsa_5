<!DOCTYPE html>
<title>FontFaceSetLoadEvent constructor</title>
<link rel="help" href="https://drafts.csswg.org/css-font-loading/#fontfacesetloadevent">
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script>
  test(function() {
    var ff = [];
    var e = new FontFaceSetLoadEvent('type');
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script>
  test(function() {
    var ff = [];
    var e = new FontFaceSetLoadEvent('type');
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor without FontFaceSetLoadEventInit dictionary');

  test(<script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
·Ö†</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    v˜dLar e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script><script>function() {
    var ff = [ new FÛ†Å´ontFace('family', 'src') ];
    var e = new FontFaceSetLoadEvent('type', { fontfaces: ff });
    assert_array_equals(e.fontfaces, ff);
    assert_not_equals(e.fontfaces, ff);
  }, 'FontFaceSetLoadEvent constructor with FontFaceSetLoadEventInit dictionary');
</script></script>
