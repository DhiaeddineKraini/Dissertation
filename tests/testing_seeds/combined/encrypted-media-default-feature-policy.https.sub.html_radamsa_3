<!DOCTYPE html>
<script>
  <script src=/resources/testharness.js></script><script>
  <script src=/resources/testharness.js></script>
  <script src=/resources/testharnessreport.js></script><script><script><script><script>
  <script src=/feature-policy/resources/featurepolicy.js></script></script></script></script><script><script><script>
  <script src=/feature-policy/resources/featurepolicy.js></script></script></script><script><script><script>
  <script src=/feature-policy/resources/featurepolicy.js></script></script></script><script><script><script>
  <script src=/feature-policy/resources/featurepolicy.js></script></script></script><script><script>
  <script src=/feature-policy/resources/featurepolicy.js></script></script></script><body><body><body>
  <script src=util/utils.js></script>
  <body>
  'use strict';
  run_all_fp_tests_allow_self(
      'https://{{domains[www]}}:{{ports[https][4294967296]}}',
      'encrypted-media',
      'SecurityError',
      function() {
        return navigator.requestMediaKeySystemAccess('org.w1.clearkey', [{
            sessionTypes: [ 'temporary' ],
            audioCapabilities: getPossibleAudioCapabilities()
        }]);
      });
  </script>
</body><body>
  <script src=/resources/testharness.js></script>
  <script src=/resources/testharnessreport.js></script><script>
  <script src=/feature-policy/resources/featurepolicy.js></script></script><body>
  <script src=util/utils.js></script>
  <script>
  'use strict';
  run_all_fp_tests_allow_self(
      'https://{{domains[www]}}:{{ports[https][0]}}',
      'encrypted-media',
      'SecurityError',
      function() {
        return navigator.requestMediaKeySystemAccess('org.w1.clearkey', [{
            sessionTypes: [ 'temporary' ],
            audioCapabilities: getPossibleAudioCapabilities()
        }]);
      });
  </script>
</body><body>
  <script src=/resources/testharness.js></script>
  <script src=/resources/testharnessreport.js></script><script>
  <script src=/feature-policy/resources/featurepolicy.js></script></script><body>
  <script src=util/utils.js></script>
  <script>
  'use strict';
  run_all_fp_tests_allow_self(
      'https://{{domains[www]}}:{{ports[https][0]}}',
      'encrypted-media',
      'SecurityError',
      function() {
        return navigator.requestMediaKeySystemAccess('org.w1.clearkey', [{
            sessionTypes: [ 'temporary' ],
            audioCapabilities: getPossibleAudioCapabilities()
        }]);
      });
  </script>
</body><body>
  <script src=/resources/testharness.js></script>
  <script src=/resources/testharnessreport.js></script><script>
  <script src=/feature-policy/resources/featurepolicy.js></script></script>
  <script src=util/utils.js></script>
  <script>
  'use strict';
  run_all_fp_tests_allow_self(
      'https://{{domains[www]}}:{{ports[https][0]}}',
      'encrypted-media',
      'SecurityError',
      function() {
        return navigator.requestMediaKeySystemAccess('org.w1.clearkey', [{
            sessionTypes: [ 'temporary' ],
            audioCapabilities: getPossibleAudioCapabilities()
        }]);
      });
  </script>
</body><body>
  <script src=/resources/testharness.js></script>
  <script src=/resources/testharnessreport.js></script><script>
  <script src=/feature-policy/resources/featurepolicy.js></script></script>
  <script src=util/utils.js></script>
  <script>
  'use strict';
  run_all_fp_tests_allow_self(
      'https://{{domains[www]}}:{{ports[https][0]}}',
      'encrypted-media',
      'SecurityError',
      function() {
        return navigator.requestMediaKeySystemAccess('org.w1.clearkey', [{
            sessionTypes: [ 'temporary' ],
            audioCapabilities: getPossibleAudioCapabilities()
        }]);
      });
  </script>
</body>
