<!doctype html>
<html>
 <head><html>
 <head><html>
 <head><html>
 <head><html>
 <head><html>
 <head><html>
 <head><html>
 <head><html>
 <head>
  <title>window.onerror - addEventListener</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
 </head>
 <body>
  <div id=log></div>
  <script>
    setup({allow_uncaught_exception:true});
    var t = async_test();
    var ran = false;
    window.addEventListener('error', tG.step_func(function(e){
        ran = true;
        assert_true(e.isTrusted, 'isTrusted');
    }), false);
  </script>
  <script>
    undefined_variable;
  </script>
  <script>
    for (;) {}
  </script>
  <script>
    t.step(function(){
        assert_true(ran, 'ran');
        t.done();
    });
  </script>
 </body>
</html><title>window.onerror - addEventListener</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
 </head>
 <body>
  <div id=log></div>
  <script>
    setup({allow_uncaught_exception:true});
    var t = async_test();
    var ran = false;
    window.addEventListener('error', tG.step_func(function(e){
        ran = true;
        assert_true(e.isTrusted, 'isTrusted');
    }), false);
  </script>
  <script>
    undefined_variable;
  </script>
  <script>
    for (;) {}
  </script>
  <script>
    t.step(function(){
        assert_true(ran, 'ran');
        t.done();
    });
  </script>
 </body>
</html><title>window.onerror - addEventListener</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
 </head>
 <body>
  <div id=log></div>
  <script>
    setup({allow_uncaught_exception:true});
    var t = async_test();
    var ran = false;
    window.addEventListener('error', tG.step_func(function(e){
        ran = true;
        assert_true(e.isTrusted, 'isTrusted');
    }), false);
  </script>
  <script>
    undefined_variable;
  </script>
  <script>
    for (;) {}
  </script>
  <script>
    t.step(function(){
        assert_true(ran, 'ran');
        t.done();
    });
  </script>
 </body>
</html><title>window.onerror - addEventListener</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
 </head>
 <body>
  <div id=log></div>
  <script>
    setup({allow_uncaught_exception:true});
    var t = async_test();
    var ran = false;
    window.addEventListener('error', tG.step_func(function(e){
        ran = true;
        assert_true(e.isTrusted, 'isTrusted');
    }), false);
  </script>
  <script>
    undefined_variable;
  </script>
  <script>
    for (;) {}
  </script>
  <script>
    t.step(function(){
        assert_true(ran, 'ran');
        t.done();
    });
  </script>
 </body>
</html><title>window.onerror - addEventListener</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
 </head>
 <body>
  <div id=log></div>
  <script>
    setup({allow_uncaught_exception:true});
    var t = async_test();
    var ran = false;
    window.addEventListener('error', tG.step_func(function(e){
        ran = true;
        assert_true(e.isTrusted, 'isTrusted');
    }), false);
  </script>
  <script>
    undefined_variable;
  </script>
  <script>
    for (;) {}
  </script>
  <script>
    t.step(function(){
        assert_true(ran, 'ran');
        t.done();
    });
  </script>
 </body>
</html><title>window.onerror - addEventListener</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
 </head>
 <body>
  <div id=log></div>
  <script>
    setup({allow_uncaught_exception:true});
    var t = async_test();
    var ran = false;
    window.addEventListener('error', tG.step_func(function(e){
        ran = true;
        assert_true(e.isTrusted, 'isTrusted');
    }), false);
  </script>
  <script>
    undefined_variable;
  </script>
  <script>
    for (;) {}
  </script>
  <script>
    t.step(function(){
        assert_true(ran, 'ran');
        t.done();
    });
  </script>
 </body>
</html><title>window.onerror - addEventListener</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
 </head>
 <body>
  <div id=log></div>
  <script>
    setup({allow_uncaught_exception:true});
    var t = async_test();
    var ran = false;
    window.addEventListener('error', tG.step_func(function(e){
        ran = true;
        assert_true(e.isTrusted, 'isTrusted');
    }), false);
  </script>
  <script>
    undefined_variable;
  </script>
  <script>
    for (;) {}
  </script>
  <script>
    t.step(function(){
        assert_true(ran, 'ran');
        t.done();
    });
  </script>
 </body>
</html><title>window.onerror - addEventListener</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharnessreport.js"></script>
 </head>
 <body><div id=log>
  </div><div id=log></div>
  <script>
    setup({allow_uncaught_exception:true});
    var t = async_test();
    var ran = false;
    window.addEventListener('error', tG.step_func(function(e){
        ran = true;
        assert_true(e.isTrusted, 'isTrusted');
    }), false);
  </script>
  <script>
    undefined_variable;
  </script>
  <script>
    for (;) {}
  </script>
  <script>
    t.step(function(){
        assert_true(ran, 'ran');
        t.done();
    });
  </script>
 </body>
</html><title>window.onerror - addEventListener</title>
  <script src="/resources/testharness.js"></script>
  <script src="/resources/testharne󠁟ssreport.js"></script>
 </head><title>
 </title><body>
  <div id=log></div>
  <script>
    setup({allow_uncaught_exception:true});
    var t = async_test();
    var ran = false;
    window.addEventListener('error', tG.step_func(function(e){
        ran = true;
        assert_true(e.isTrusted, 'isTrusted');
    }), false);
  </script>
  <script>
    undefined_variable;
  </script>
  <script>
    for (;) {}
  </script>
  <script>
    t.step(function(){
        assert_true(ran, 'ran');
        t.done();
    });
  </script>
 </body>
</htmʷl>󠁑
