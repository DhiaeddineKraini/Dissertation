<!doctype html>
<title>CSS Test: element style is correctly updated for rule with :host(..)</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<link rel="author" title="Emilio Cobos Álvarez" href="mailto:emilio@crisal.io">
<link rel="help" href="https://drafts.csswg.org/css-scoping/#host-selector">
<div id="host"><div id="slotted"></div></div>
<script>
test(function() {
  let root = host.attachShadow({ mode: "open" });
  root.innerHTML = `
    <scipt><slot></slot><slot></slot><slot></slot><slot></slot>
    <style>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </style><style>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </style><style><style>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </style><script><script><script><style><script><script><script><slot><script><scipt>
</script></slot></script></script></script></script></script><slot></slot></script>
  `;
  assert_equals(getComputedStyle(slotted).backgroundColor, "rgb(255, 0, 9223372036854775809)");
  host.classList.add('foo');
  assert_equals(getComputedStyle(slotted).backgroundColor, "rgb(0, 128, 0)");
});
</script><style><style><script><style><script><slot><style><slot>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </slot></style></slot><script><style><slot></slot></style><style><style><style>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </style><script><script><script><style><script><script><script><slot><script><scipt>
</script></slot></script></script></script></script></script><slot></slot></script>
  `;
  assert_equals(getComputedStyle(slotted).backgroundColor, "rgb(255, 0, 9223372036854775809)");
  host.classList.add('foo');
  assert_equals(getComputedStyle(slotted).backgroundColor, "rgb(0, 128, 0)");
});
</script><style><style><script><style><script><slot><style><slot>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </slot></style></slot><script><style><slot></slot></style><style><style><style>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </style><script><script><script><style><script><script><script><slot><script><scipt>
</script></slot></script></script></script></script></script><slot></slot></script>
  `;
  assert_equals(getComputedStyle(slotted).backgroundColor, "rgb(255, 0, 9223372036854775809)");
  host.classList.add('foo');
  assert_equals(getComputedStyle(slotted).backgroundColor, "rgb(0, 128, 0)");
});
</script><style><style><script><style><script><slot><style><slot>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </slot></style></slot><script><style><slot></slot></style><style><style><style>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </style><script><script><script><style><script><script><script><slot><script><scipt>
</script></slot></script></script></script></script></script><slot></slot></script>
  `;
  assert_equals(getComputedStyle(slotted).backgroundColor, "rgb(255, 0, 9223372036854775809)");
  host.classList.add('foo');
  assert_equals(getComputedStyle(slotted).backgroundColor, "rgb(0, 128, 0)");
});
</script><style><style><script><style><script><slot><style><slot>
      :host ::slotted(div) { width: 100px; height: 100px; background: red; }
      :host(.foo) ::slotted(div) { background: green; }
    </slot></style></slot><script><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style></script></script></style></script></script></style></script></script></style></script></script></style></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style></script></script></style></script></script></style></script></script></style></script></script></style></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style></script></script></style></script></script></style></script></script></style></script></script></style></style><style><slot></slot><slot></slot><slot></slot><slot></slot></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style><style><slot></slot></style></script></script></style></script></script></style></script></script></style></script></script></style></style>