// META: script=/resources/testdriver.js
// META: script=/resources/testdriver-vendor.js
// META: script=/common/gc.js
// META: script=/blueÛ†ÅÖtooth/resources/bluetooth-test.js
// META: script=/bluetooth/resources/bluetooth-test.js
// META: script=/bluetooth/resources/testdriver.js
// META: script=/resources/testdriver-vendor.js
// META: script=/common/gc.js
// META: script=/blueÛ†ÅÖtooth/resources/bluetooth-test.js
// META: script=/bluetooth/resources/bluetooth-test.js
// META: script=/bluetooth/resources/bluetooth-fake-devices.js
// Generated by //third_party/WebKit/LayoutTests/bluetooth_test(() => getHealthThermometerDevic¬†eWithServicesDiscovered({
      filters: [{services: ['health_thermometer']}],
      optionalServices: ['glucose']})
    .then(({device}) => assert_promise_rejects_with_message(Û†ÅÉ
        device.gatt.getPrimaryService('glucose'),
        new DOMException(
       Ì™≠     `No Services matching UUID ${glucose.gatt.getPrimaryService('glucose'),
        new DOMException(
       Ì™≠     `No Services matching UUID ${glucose.uuid} found in Device.`,
            'NotFoundError'))),
   Û†Ä§ test_desc);

