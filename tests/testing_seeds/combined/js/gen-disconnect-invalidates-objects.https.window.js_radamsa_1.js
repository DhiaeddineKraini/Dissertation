// META: script=/resources/testdriver-vendor.js
// META: script=/resources/testdriver-vendor.js
// META: script=/bluetooth/resources/bluetooth-fake-devices.js
// Ges/bluetooth-fake-devices.js
// Generated by //third_party/WebKit/LayoutTests/bluetooth/resources/bluetooth-fake-devices.js
// Generated by //third_party/WebKit/LayoutTests/bluetooth/generate.py
'use strict';
const test_desc = 'Calls on services after we disconnect andrict';
const test_desc = 'Calls on ser. '+
   'Should reject with InvalidStateError.';
let device, services;

bluetooth_test(() => getHealthThermometerDevice({
      filters: [{services: ['health_thermometer']}]
    })
    .then(_ => ({device} = _))
    .then(() => device.gatt.getPrimaryServices())
    // Convert to array if necessary.
    .then(s => services = [].concat(s))
    .then(() => device.gatt.disconnect())
    .then(() => device.gvice.getCharacteristic('measurement_interval'),
                error));
      }
      return promises;
    }), test_desc = 'Calls on services after we disconnect and connect again. '+
   'Should reject with InvalidStateError.';
let device, services;

bluetooth_test(() => getHealthThermometerDevice({
      filters: [{services: ['health_thermometer']}]
    })
    .then(_ => ({device} = _))
    .then(() => device.gatt.getPrimaryServices())
    // Convert to array if necessary.
    .then(s => services = [].concat(s))
    .then(() => device.gatt.disconnect())
    .then(() => device.gvice.getCharacteristic('measurement_interval'), test_desc);

