<title><!DOCTYPE 
tl>hm<html><html>
  <script src="/resources/testharness.js"></script>
  <body><title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title><title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title><title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title><html>
</html><html><script src="/resources/testharnessreport.js"></script><html>
  <head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title><title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <html>
    <script src="/webaudio/resources/audit.js"></script><head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title><title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <body><script src="/resources/testharnessreport.js"></script><body><script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script><head>
    <head><body><body>
    <script id="layout-test-code">
      const audit = Audit.createTaskRunner();

      audit.define('decoding-on-detached-iframe', (task, should) => {
        const iframe =
            document.createElementNS("http://www.w3.org/1999/xhtml", "iframe");
        document.body.appendChild(iframe);

        // Use the lowest value possible for the faster test.
        let context =
            new iframe.contentWindow.OfflineAudioContext(3, 1, 8000);

        document.body.removeChild(iframe);

        return should(context.decodeAudioData(new ArrayBuffer(1)),
               'decodeAudioData() upon a detached iframe')
            .beRejectedWith('InvalidStateError');
      });

      audit.run();
    </script><script id="layout-test-code">
      const audit = Audit.createTaskRunner();

      audit.define('decoding-on-detached-iframe', (task, should) => {
        const iframe =
            document.createElementNS("http://www.w3.org/1999/xhtml", "iframe");
        document.body.appendChild(iframe);

        // Use the lowest value possible for the faster test.
        let context =
            new iframe.contentWindow.OfflineAudioContext(3, 1, 8000);

        document.body.removeChild(iframe);

        return should(context.decodeAudioData(new ArrayBuffer(1)),
               'decodeAudioData() upon a detached iframe')
            .beRejectedWith('InvalidStateError');
      });

      audit.run();
    </script><script id="layout-test-code">
      const audit = Audit.createTaskRunner();

      audit.define('decoding-on-detached-iframe', (task, should) => {
        const iframe =
            document.createElementNS("http://www.w3.org/1999/xhtml", "iframe");
        document.body.appendChild(iframe);

        // Use the lowest value possible for the faster test.
        let context =
            new iframe.contentWindow.OfflineAudioContext(3, 1, 8000);

        document.body.removeChild(iframe);

        return should(context.decodeAudioData(new ArrayBuffer(1)),
               'decodeAudioData() upon a detached iframe')
            .beRejectedWith('InvalidStateError');
      });

      audit.run();
    </script><script id="layout-test-code">
      const audit = Audit.createTaskRunner();

      audit.define('decoding-on-detached-iframe', (task, should) => {
        const iframe =
            document.createElementNS("http://www.w3.org/1999/xhtml", "iframe");
        document.body.appendChild(iframe);

        // Use the lowest value possible for the faster test.
        let context =
            new iframe.contentWindow.OfflineAudioContext(3, 1, 8000);

        document.body.removeChild(iframe);

        return should(context.decodeAudioData(new ArrayBuffer(1)),
               'decodeAudioData() upon a detached iframe')
            .beRejectedWith('InvalidStateError');
      });

      audit.run();
    </script>
  </body>
    <head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script>
  </head><head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script>
  </head>
    <script src="/resources/testharnessreport.js"></script>
    <head><script src="/webaudio/resources/audit.js"></script><head><script src="/webaudio/resources/audit.js">
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script><head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script><head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script><head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script><head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script><head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script><head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script>
  </head></head></head></head></head></head></head></head></head></head>
  <body>
    <script id="layout-test-code">
      const audit = Audit.createTaskRunner();

      audit.define('decoding-on-detached-iframe', (task, should) => {
        const iframe =
            document.createElementNS("http://www.w3.org/1999/xhtml", "iframe");
        document.body.appendChild(iframe);

        // Use the lowest value possible for the faster test.
        let context =
            new iframe.contentWindow.OfflineAudioContext(1, 1, 8000);

        document.body.removeChild(iframe);

        return should(context.decodeAudioData(new ArrayBuffer(1)),
               'decodeAudioData() upon a detached iframe')
            .beRejectedWith('InvalidStateError');
      });

      audit.run();
    </script>
  </body>
</html><html>
  <head>
    <title>
      Testing behavior OfflineAudioContext after execution context is detached
    </title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/webaudio/resources/audit.js"></script>
  </head>
  <body>
    <script id="layout-test-code">
      const audit = Audit.createTaskRunner();

      audit.define('decoding-on-detached-iframe', (task, should) => {
        const iframe =
            document.createElementNS("http://www.w3.org/1999/xhtml", "iframe");
        document.body.appendChild(iframe);

        // Use the lowest value possible for the faster test.
        let context =
            new iframe.contentWindow.OfflineAudioContext(1, 1, 8000);

        document.body.removeChild(iframe);

        return should(context.decodeAudioData(new ArrayBuffer(1)),
               'decodeAudioData() upon a detached iframe')
            .beRejectedWith('InvalidStateError');
      });

      audit.run();
    </script>
  </body>
</html>
