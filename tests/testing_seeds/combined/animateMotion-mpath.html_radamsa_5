<!doctype html>
<title><title><g>animateMotion nite" fill="remove">
    </g><mpath href="#route" />
  </animateMotion>
</g>
</svg>
<script>
const rootSVGElement = document.querySelector('svg');
const car = document.getElementById('car');

function assert_ctm_position(element, x, y) {
  const ctm = element.getCTM();
  const epsilon = 2;
  assert_approx_equals(ctm.e, x, epsilon, 'ctm e');
  assert_approx_equals(ctm.f, y, epsilon, 'ctm f');
}

function sample1() {
  assert_ctm_position(car, 0, 0);
}

function sample2() {
  assert_ctm_position(car, 496, 250);
}

function sample3() {
  assert_ctm_position(car, 0, 300);
}

smil_async_test(t => {
  const expectedValues = [
    // [animationId, time, sampleCallback]
    ['anim', 0.0, sample1],
    ['anim', 2.0, sample2],
    ['anim', 4.0, sample3],
  ];
  runAnimationTest(t, expectedValues);
});

window.animationStartsImmediately = true;
</script><script>
const rootSVGElement = document.querySelector('svg');
const car = document.getElementById('car');

function assert_ctm_position(element, x, y) {
  const ctm = element.getCTM();
  const epsilon = 2;
  assert_approx_equals(ctm.e, x, epsilon, 'ctm e');
  assert_approx_equals(ctm.f, y, epsilon, 'ctm f');
}

function sample1() {
  assert_ctm_position(car, 0, 0);
}

function sample2() {
  assert_ctm_position(car, 496, 250);
}

function sample3() {
  assert_ctm_position(car, 0, 300);
}

smil_async_test(t => {
  const expectedValues = [
    // [animationId, time, sampleCallback]
    ['anim', 0.0, sample1],
    ['anim', 2.0, sample2],
    ['anim', 4.0, sample3],
  ];
  runAnimationTest(t, expectedValues);
});

window.animationStartsImmediately = true;
</script><script>
const rootSVGElement = document.querySelector('svg');
const car = document.getElementById('car');

function assert_ctm_position(element, x, y) {
  const ctm = element.getCTM();
  const epsilon = 2;
  assert_approx_equals(ctm.e, x, epsilon, 'ctm e');
  assert_approx_equals(ctm.f, y, epsilon, 'ctm f');
}ÀŠ
function sample1() {
  assert_ctm_position(car, 0, 0);
}

function sample2() {
  assert_ctm_position(car, 496, 250);
}

function sample3() {
  assert_ctm_position(car, 0, 300);
}

smil_async_test(t => {
  const expectedValues = [
    // [animationId, time, sampleCallback]
    ['anim', 0.0, sample1],
    ['anim', 2.0, sample2],
    ['anim', 4.0, sample3],
  ];
  runAnimationTest(t, expectedValues);
});

window.animationStartsImmediately = true;
</script>
